/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const TUNA_CONFIG_DISCRIMINATOR = new Uint8Array([
  124, 149, 24, 7, 195, 168, 153, 58,
]);

export function getTunaConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TUNA_CONFIG_DISCRIMINATOR);
}

export type TunaConfig = {
  discriminator: ReadonlyUint8Array;
  /** Struct version. */
  version: number;
  /** Bump seed for the vaults config account. */
  bump: number;
  /** Current update authority address for both the tunaConfig and the Vault PDAs themselves - can be updated. */
  adminAuthority: Address;
  /** Fee recipient address. */
  feeRecipient: Address;
  /** Owner of the program. Can change ownership and set the admin of the program. */
  ownerAuthority: Address;
  /** OBSOLETE: Maximum allowed swap slippage percentage. */
  maxSwapSlippage: number;
  /** Maximum allowed percentage of leftovers. If it's set to zero, the DEFAULT_MAX_LEFTOVERS is used. */
  maxPercentageOfLeftovers: number;
  /** Suspends lending deposits in case of emergency. */
  suspendLendingDeposits: boolean;
  /** Suspends lending withdrawals in case of emergency. */
  suspendLendingWithdrawals: boolean;
  /** Suspends adding liquidity to positions in case of emergency. */
  suspendAddLiquidity: boolean;
  /** Suspends removing liquidity, claiming fees and closing positions in case of emergency. */
  suspendRemoveLiquidity: boolean;
  /** Liquidation bot wallet. */
  liquidatorAuthority: Address;
  /** Reserved */
  reserved: ReadonlyUint8Array;
};

export type TunaConfigArgs = {
  /** Struct version. */
  version: number;
  /** Bump seed for the vaults config account. */
  bump: number;
  /** Current update authority address for both the tunaConfig and the Vault PDAs themselves - can be updated. */
  adminAuthority: Address;
  /** Fee recipient address. */
  feeRecipient: Address;
  /** Owner of the program. Can change ownership and set the admin of the program. */
  ownerAuthority: Address;
  /** OBSOLETE: Maximum allowed swap slippage percentage. */
  maxSwapSlippage: number;
  /** Maximum allowed percentage of leftovers. If it's set to zero, the DEFAULT_MAX_LEFTOVERS is used. */
  maxPercentageOfLeftovers: number;
  /** Suspends lending deposits in case of emergency. */
  suspendLendingDeposits: boolean;
  /** Suspends lending withdrawals in case of emergency. */
  suspendLendingWithdrawals: boolean;
  /** Suspends adding liquidity to positions in case of emergency. */
  suspendAddLiquidity: boolean;
  /** Suspends removing liquidity, claiming fees and closing positions in case of emergency. */
  suspendRemoveLiquidity: boolean;
  /** Liquidation bot wallet. */
  liquidatorAuthority: Address;
  /** Reserved */
  reserved: ReadonlyUint8Array;
};

export function getTunaConfigEncoder(): Encoder<TunaConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['version', getU16Encoder()],
      ['bump', getU8Encoder()],
      ['adminAuthority', getAddressEncoder()],
      ['feeRecipient', getAddressEncoder()],
      ['ownerAuthority', getAddressEncoder()],
      ['maxSwapSlippage', getU32Encoder()],
      ['maxPercentageOfLeftovers', getU32Encoder()],
      ['suspendLendingDeposits', getBooleanEncoder()],
      ['suspendLendingWithdrawals', getBooleanEncoder()],
      ['suspendAddLiquidity', getBooleanEncoder()],
      ['suspendRemoveLiquidity', getBooleanEncoder()],
      ['liquidatorAuthority', getAddressEncoder()],
      ['reserved', fixEncoderSize(getBytesEncoder(), 180)],
    ]),
    (value) => ({ ...value, discriminator: TUNA_CONFIG_DISCRIMINATOR })
  );
}

export function getTunaConfigDecoder(): Decoder<TunaConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['version', getU16Decoder()],
    ['bump', getU8Decoder()],
    ['adminAuthority', getAddressDecoder()],
    ['feeRecipient', getAddressDecoder()],
    ['ownerAuthority', getAddressDecoder()],
    ['maxSwapSlippage', getU32Decoder()],
    ['maxPercentageOfLeftovers', getU32Decoder()],
    ['suspendLendingDeposits', getBooleanDecoder()],
    ['suspendLendingWithdrawals', getBooleanDecoder()],
    ['suspendAddLiquidity', getBooleanDecoder()],
    ['suspendRemoveLiquidity', getBooleanDecoder()],
    ['liquidatorAuthority', getAddressDecoder()],
    ['reserved', fixDecoderSize(getBytesDecoder(), 180)],
  ]);
}

export function getTunaConfigCodec(): Codec<TunaConfigArgs, TunaConfig> {
  return combineCodec(getTunaConfigEncoder(), getTunaConfigDecoder());
}

export function decodeTunaConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<TunaConfig, TAddress>;
export function decodeTunaConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<TunaConfig, TAddress>;
export function decodeTunaConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<TunaConfig, TAddress> | MaybeAccount<TunaConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTunaConfigDecoder()
  );
}

export async function fetchTunaConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<TunaConfig, TAddress>> {
  const maybeAccount = await fetchMaybeTunaConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTunaConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<TunaConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTunaConfig(maybeAccount);
}

export async function fetchAllTunaConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<TunaConfig>[]> {
  const maybeAccounts = await fetchAllMaybeTunaConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTunaConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<TunaConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTunaConfig(maybeAccount));
}

export function getTunaConfigSize(): number {
  return 331;
}
