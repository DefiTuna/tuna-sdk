/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const VAULT_DISCRIMINATOR = new Uint8Array([
  211, 8, 232, 43, 2, 152, 117, 119,
]);

export function getVaultDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(VAULT_DISCRIMINATOR);
}

export type Vault = {
  discriminator: ReadonlyUint8Array;
  /** Struct version */
  version: number;
  /** Bump seed for the vault account */
  bump: ReadonlyUint8Array;
  /** The mint of the token that this vault holds */
  mint: Address;
  /** The amount of funds deposited in the vault - takes into account accrued interest */
  depositedFunds: bigint;
  /** The amount of shares deposited in the vault */
  depositedShares: bigint;
  /** The amount of funds borrowed from the vault - takes into account accrued interest */
  borrowedFunds: bigint;
  /** The amount of shares borrowed from the vault */
  borrowedShares: bigint;
  /** Bad dept may appear on a position liquidation if not enough funds to repay the debt to a lending pool. */
  unpaidDebtShares: bigint;
  /** The interest rate of the vault per seconds. (1<<60) / 31536000 = 1152921504606846976 / 31536000 = 100% annually. */
  interestRate: bigint;
  /** The last time the vault was updated. */
  lastUpdateTimestamp: bigint;
  /** The maximum allowed supply for this pool. The default value 0 is unlimited supply. */
  supplyLimit: bigint;
  /** Pyth oracle price update account. */
  pythOraclePriceUpdate: Address;
  /** Pyth oracle price feed id. */
  pythOracleFeedId: Address;
  /** Reserved */
  reserved: ReadonlyUint8Array;
};

export type VaultArgs = {
  /** Struct version */
  version: number;
  /** Bump seed for the vault account */
  bump: ReadonlyUint8Array;
  /** The mint of the token that this vault holds */
  mint: Address;
  /** The amount of funds deposited in the vault - takes into account accrued interest */
  depositedFunds: number | bigint;
  /** The amount of shares deposited in the vault */
  depositedShares: number | bigint;
  /** The amount of funds borrowed from the vault - takes into account accrued interest */
  borrowedFunds: number | bigint;
  /** The amount of shares borrowed from the vault */
  borrowedShares: number | bigint;
  /** Bad dept may appear on a position liquidation if not enough funds to repay the debt to a lending pool. */
  unpaidDebtShares: number | bigint;
  /** The interest rate of the vault per seconds. (1<<60) / 31536000 = 1152921504606846976 / 31536000 = 100% annually. */
  interestRate: number | bigint;
  /** The last time the vault was updated. */
  lastUpdateTimestamp: number | bigint;
  /** The maximum allowed supply for this pool. The default value 0 is unlimited supply. */
  supplyLimit: number | bigint;
  /** Pyth oracle price update account. */
  pythOraclePriceUpdate: Address;
  /** Pyth oracle price feed id. */
  pythOracleFeedId: Address;
  /** Reserved */
  reserved: ReadonlyUint8Array;
};

export function getVaultEncoder(): Encoder<VaultArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['version', getU16Encoder()],
      ['bump', fixEncoderSize(getBytesEncoder(), 1)],
      ['mint', getAddressEncoder()],
      ['depositedFunds', getU64Encoder()],
      ['depositedShares', getU64Encoder()],
      ['borrowedFunds', getU64Encoder()],
      ['borrowedShares', getU64Encoder()],
      ['unpaidDebtShares', getU64Encoder()],
      ['interestRate', getU64Encoder()],
      ['lastUpdateTimestamp', getU64Encoder()],
      ['supplyLimit', getU64Encoder()],
      ['pythOraclePriceUpdate', getAddressEncoder()],
      ['pythOracleFeedId', getAddressEncoder()],
      ['reserved', fixEncoderSize(getBytesEncoder(), 184)],
    ]),
    (value) => ({ ...value, discriminator: VAULT_DISCRIMINATOR })
  );
}

export function getVaultDecoder(): Decoder<Vault> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['version', getU16Decoder()],
    ['bump', fixDecoderSize(getBytesDecoder(), 1)],
    ['mint', getAddressDecoder()],
    ['depositedFunds', getU64Decoder()],
    ['depositedShares', getU64Decoder()],
    ['borrowedFunds', getU64Decoder()],
    ['borrowedShares', getU64Decoder()],
    ['unpaidDebtShares', getU64Decoder()],
    ['interestRate', getU64Decoder()],
    ['lastUpdateTimestamp', getU64Decoder()],
    ['supplyLimit', getU64Decoder()],
    ['pythOraclePriceUpdate', getAddressDecoder()],
    ['pythOracleFeedId', getAddressDecoder()],
    ['reserved', fixDecoderSize(getBytesDecoder(), 184)],
  ]);
}

export function getVaultCodec(): Codec<VaultArgs, Vault> {
  return combineCodec(getVaultEncoder(), getVaultDecoder());
}

export function decodeVault<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Vault, TAddress>;
export function decodeVault<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Vault, TAddress>;
export function decodeVault<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Vault, TAddress> | MaybeAccount<Vault, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVaultDecoder()
  );
}

export async function fetchVault<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Vault, TAddress>> {
  const maybeAccount = await fetchMaybeVault(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVault<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Vault, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVault(maybeAccount);
}

export async function fetchAllVault(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Vault>[]> {
  const maybeAccounts = await fetchAllMaybeVault(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVault(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Vault>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVault(maybeAccount));
}

export function getVaultSize(): number {
  return 355;
}
