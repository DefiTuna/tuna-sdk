/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TUNA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const COLLECT_REWARD_ORCA_DISCRIMINATOR = new Uint8Array([
  99, 253, 84, 63, 250, 243, 165, 191,
]);

export function getCollectRewardOrcaDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COLLECT_REWARD_ORCA_DISCRIMINATOR
  );
}

export type CollectRewardOrcaInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountTunaConfig extends string | IAccountMeta<string> = string,
  TAccountRewardMint extends string | IAccountMeta<string> = string,
  TAccountTunaPosition extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAta extends string | IAccountMeta<string> = string,
  TAccountWhirlpoolProgram extends string | IAccountMeta<string> = string,
  TAccountWhirlpool extends string | IAccountMeta<string> = string,
  TAccountOrcaPosition extends string | IAccountMeta<string> = string,
  TAccountRewardVault extends string | IAccountMeta<string> = string,
  TAccountTickArrayLower extends string | IAccountMeta<string> = string,
  TAccountTickArrayUpper extends string | IAccountMeta<string> = string,
  TAccountRewardOwnerAta extends string | IAccountMeta<string> = string,
  TAccountRewardTokenProgram extends string | IAccountMeta<string> = string,
  TAccountMemoProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTunaConfig extends string
        ? ReadonlyAccount<TAccountTunaConfig>
        : TAccountTunaConfig,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountTunaPosition extends string
        ? WritableAccount<TAccountTunaPosition>
        : TAccountTunaPosition,
      TAccountTunaPositionAta extends string
        ? ReadonlyAccount<TAccountTunaPositionAta>
        : TAccountTunaPositionAta,
      TAccountWhirlpoolProgram extends string
        ? ReadonlyAccount<TAccountWhirlpoolProgram>
        : TAccountWhirlpoolProgram,
      TAccountWhirlpool extends string
        ? ReadonlyAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountOrcaPosition extends string
        ? WritableAccount<TAccountOrcaPosition>
        : TAccountOrcaPosition,
      TAccountRewardVault extends string
        ? WritableAccount<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountTickArrayLower extends string
        ? WritableAccount<TAccountTickArrayLower>
        : TAccountTickArrayLower,
      TAccountTickArrayUpper extends string
        ? WritableAccount<TAccountTickArrayUpper>
        : TAccountTickArrayUpper,
      TAccountRewardOwnerAta extends string
        ? WritableAccount<TAccountRewardOwnerAta>
        : TAccountRewardOwnerAta,
      TAccountRewardTokenProgram extends string
        ? ReadonlyAccount<TAccountRewardTokenProgram>
        : TAccountRewardTokenProgram,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CollectRewardOrcaInstructionData = {
  discriminator: ReadonlyUint8Array;
  rewardIndex: number;
};

export type CollectRewardOrcaInstructionDataArgs = { rewardIndex: number };

export function getCollectRewardOrcaInstructionDataEncoder(): Encoder<CollectRewardOrcaInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['rewardIndex', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: COLLECT_REWARD_ORCA_DISCRIMINATOR })
  );
}

export function getCollectRewardOrcaInstructionDataDecoder(): Decoder<CollectRewardOrcaInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['rewardIndex', getU8Decoder()],
  ]);
}

export function getCollectRewardOrcaInstructionDataCodec(): Codec<
  CollectRewardOrcaInstructionDataArgs,
  CollectRewardOrcaInstructionData
> {
  return combineCodec(
    getCollectRewardOrcaInstructionDataEncoder(),
    getCollectRewardOrcaInstructionDataDecoder()
  );
}

export type CollectRewardOrcaInput<
  TAccountAuthority extends string = string,
  TAccountTunaConfig extends string = string,
  TAccountRewardMint extends string = string,
  TAccountTunaPosition extends string = string,
  TAccountTunaPositionAta extends string = string,
  TAccountWhirlpoolProgram extends string = string,
  TAccountWhirlpool extends string = string,
  TAccountOrcaPosition extends string = string,
  TAccountRewardVault extends string = string,
  TAccountTickArrayLower extends string = string,
  TAccountTickArrayUpper extends string = string,
  TAccountRewardOwnerAta extends string = string,
  TAccountRewardTokenProgram extends string = string,
  TAccountMemoProgram extends string = string,
> = {
  /**
   *
   * TUNA accounts
   *
   */
  authority: TransactionSigner<TAccountAuthority>;
  tunaConfig: Address<TAccountTunaConfig>;
  rewardMint: Address<TAccountRewardMint>;
  tunaPosition: Address<TAccountTunaPosition>;
  tunaPositionAta: Address<TAccountTunaPositionAta>;
  /**
   *
   * ORCA accounts
   *
   */
  whirlpoolProgram: Address<TAccountWhirlpoolProgram>;
  whirlpool: Address<TAccountWhirlpool>;
  orcaPosition: Address<TAccountOrcaPosition>;
  rewardVault: Address<TAccountRewardVault>;
  tickArrayLower: Address<TAccountTickArrayLower>;
  tickArrayUpper: Address<TAccountTickArrayUpper>;
  rewardOwnerAta: Address<TAccountRewardOwnerAta>;
  /**
   *
   * Other accounts
   *
   */
  rewardTokenProgram: Address<TAccountRewardTokenProgram>;
  memoProgram: Address<TAccountMemoProgram>;
  rewardIndex: CollectRewardOrcaInstructionDataArgs['rewardIndex'];
};

export function getCollectRewardOrcaInstruction<
  TAccountAuthority extends string,
  TAccountTunaConfig extends string,
  TAccountRewardMint extends string,
  TAccountTunaPosition extends string,
  TAccountTunaPositionAta extends string,
  TAccountWhirlpoolProgram extends string,
  TAccountWhirlpool extends string,
  TAccountOrcaPosition extends string,
  TAccountRewardVault extends string,
  TAccountTickArrayLower extends string,
  TAccountTickArrayUpper extends string,
  TAccountRewardOwnerAta extends string,
  TAccountRewardTokenProgram extends string,
  TAccountMemoProgram extends string,
  TProgramAddress extends Address = typeof TUNA_PROGRAM_ADDRESS,
>(
  input: CollectRewardOrcaInput<
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountRewardMint,
    TAccountTunaPosition,
    TAccountTunaPositionAta,
    TAccountWhirlpoolProgram,
    TAccountWhirlpool,
    TAccountOrcaPosition,
    TAccountRewardVault,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountRewardOwnerAta,
    TAccountRewardTokenProgram,
    TAccountMemoProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CollectRewardOrcaInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountTunaConfig,
  TAccountRewardMint,
  TAccountTunaPosition,
  TAccountTunaPositionAta,
  TAccountWhirlpoolProgram,
  TAccountWhirlpool,
  TAccountOrcaPosition,
  TAccountRewardVault,
  TAccountTickArrayLower,
  TAccountTickArrayUpper,
  TAccountRewardOwnerAta,
  TAccountRewardTokenProgram,
  TAccountMemoProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TUNA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    tunaConfig: { value: input.tunaConfig ?? null, isWritable: false },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    tunaPosition: { value: input.tunaPosition ?? null, isWritable: true },
    tunaPositionAta: {
      value: input.tunaPositionAta ?? null,
      isWritable: false,
    },
    whirlpoolProgram: {
      value: input.whirlpoolProgram ?? null,
      isWritable: false,
    },
    whirlpool: { value: input.whirlpool ?? null, isWritable: false },
    orcaPosition: { value: input.orcaPosition ?? null, isWritable: true },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    tickArrayLower: { value: input.tickArrayLower ?? null, isWritable: true },
    tickArrayUpper: { value: input.tickArrayUpper ?? null, isWritable: true },
    rewardOwnerAta: { value: input.rewardOwnerAta ?? null, isWritable: true },
    rewardTokenProgram: {
      value: input.rewardTokenProgram ?? null,
      isWritable: false,
    },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tunaConfig),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.tunaPosition),
      getAccountMeta(accounts.tunaPositionAta),
      getAccountMeta(accounts.whirlpoolProgram),
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.orcaPosition),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.tickArrayLower),
      getAccountMeta(accounts.tickArrayUpper),
      getAccountMeta(accounts.rewardOwnerAta),
      getAccountMeta(accounts.rewardTokenProgram),
      getAccountMeta(accounts.memoProgram),
    ],
    programAddress,
    data: getCollectRewardOrcaInstructionDataEncoder().encode(
      args as CollectRewardOrcaInstructionDataArgs
    ),
  } as CollectRewardOrcaInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountRewardMint,
    TAccountTunaPosition,
    TAccountTunaPositionAta,
    TAccountWhirlpoolProgram,
    TAccountWhirlpool,
    TAccountOrcaPosition,
    TAccountRewardVault,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountRewardOwnerAta,
    TAccountRewardTokenProgram,
    TAccountMemoProgram
  >;

  return instruction;
}

export type ParsedCollectRewardOrcaInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     *
     * TUNA accounts
     *
     */

    authority: TAccountMetas[0];
    tunaConfig: TAccountMetas[1];
    rewardMint: TAccountMetas[2];
    tunaPosition: TAccountMetas[3];
    tunaPositionAta: TAccountMetas[4];
    /**
     *
     * ORCA accounts
     *
     */

    whirlpoolProgram: TAccountMetas[5];
    whirlpool: TAccountMetas[6];
    orcaPosition: TAccountMetas[7];
    rewardVault: TAccountMetas[8];
    tickArrayLower: TAccountMetas[9];
    tickArrayUpper: TAccountMetas[10];
    rewardOwnerAta: TAccountMetas[11];
    /**
     *
     * Other accounts
     *
     */

    rewardTokenProgram: TAccountMetas[12];
    memoProgram: TAccountMetas[13];
  };
  data: CollectRewardOrcaInstructionData;
};

export function parseCollectRewardOrcaInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCollectRewardOrcaInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      tunaConfig: getNextAccount(),
      rewardMint: getNextAccount(),
      tunaPosition: getNextAccount(),
      tunaPositionAta: getNextAccount(),
      whirlpoolProgram: getNextAccount(),
      whirlpool: getNextAccount(),
      orcaPosition: getNextAccount(),
      rewardVault: getNextAccount(),
      tickArrayLower: getNextAccount(),
      tickArrayUpper: getNextAccount(),
      rewardOwnerAta: getNextAccount(),
      rewardTokenProgram: getNextAccount(),
      memoProgram: getNextAccount(),
    },
    data: getCollectRewardOrcaInstructionDataDecoder().decode(instruction.data),
  };
}
