/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TUNA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CREATE_VAULT_DISCRIMINATOR = new Uint8Array([
  29, 237, 247, 208, 193, 82, 54, 135,
]);

export function getCreateVaultDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_VAULT_DISCRIMINATOR
  );
}

export type CreateVaultInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountTunaConfig extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountVaultAta extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountTunaConfig extends string
        ? ReadonlyAccount<TAccountTunaConfig>
        : TAccountTunaConfig,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountVaultAta extends string
        ? WritableAccount<TAccountVaultAta>
        : TAccountVaultAta,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateVaultInstructionData = {
  discriminator: ReadonlyUint8Array;
  interestRate: bigint;
  supplyLimit: bigint;
  pythOraclePriceUpdate: Address;
  pythOracleFeedId: Address;
};

export type CreateVaultInstructionDataArgs = {
  interestRate: number | bigint;
  supplyLimit: number | bigint;
  pythOraclePriceUpdate: Address;
  pythOracleFeedId: Address;
};

export function getCreateVaultInstructionDataEncoder(): Encoder<CreateVaultInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['interestRate', getU64Encoder()],
      ['supplyLimit', getU64Encoder()],
      ['pythOraclePriceUpdate', getAddressEncoder()],
      ['pythOracleFeedId', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_VAULT_DISCRIMINATOR })
  );
}

export function getCreateVaultInstructionDataDecoder(): Decoder<CreateVaultInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['interestRate', getU64Decoder()],
    ['supplyLimit', getU64Decoder()],
    ['pythOraclePriceUpdate', getAddressDecoder()],
    ['pythOracleFeedId', getAddressDecoder()],
  ]);
}

export function getCreateVaultInstructionDataCodec(): Codec<
  CreateVaultInstructionDataArgs,
  CreateVaultInstructionData
> {
  return combineCodec(
    getCreateVaultInstructionDataEncoder(),
    getCreateVaultInstructionDataDecoder()
  );
}

export type CreateVaultInput<
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountTunaConfig extends string = string,
  TAccountVault extends string = string,
  TAccountVaultAta extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  mint: Address<TAccountMint>;
  tunaConfig: Address<TAccountTunaConfig>;
  vault: Address<TAccountVault>;
  vaultAta: Address<TAccountVaultAta>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  interestRate: CreateVaultInstructionDataArgs['interestRate'];
  supplyLimit: CreateVaultInstructionDataArgs['supplyLimit'];
  pythOraclePriceUpdate: CreateVaultInstructionDataArgs['pythOraclePriceUpdate'];
  pythOracleFeedId: CreateVaultInstructionDataArgs['pythOracleFeedId'];
};

export function getCreateVaultInstruction<
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountTunaConfig extends string,
  TAccountVault extends string,
  TAccountVaultAta extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TUNA_PROGRAM_ADDRESS,
>(
  input: CreateVaultInput<
    TAccountAuthority,
    TAccountMint,
    TAccountTunaConfig,
    TAccountVault,
    TAccountVaultAta,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateVaultInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountMint,
  TAccountTunaConfig,
  TAccountVault,
  TAccountVaultAta,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TUNA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    tunaConfig: { value: input.tunaConfig ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: true },
    vaultAta: { value: input.vaultAta ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tunaConfig),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.vaultAta),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateVaultInstructionDataEncoder().encode(
      args as CreateVaultInstructionDataArgs
    ),
  } as CreateVaultInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountTunaConfig,
    TAccountVault,
    TAccountVaultAta,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateVaultInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    mint: TAccountMetas[1];
    tunaConfig: TAccountMetas[2];
    vault: TAccountMetas[3];
    vaultAta: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: CreateVaultInstructionData;
};

export function parseCreateVaultInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateVaultInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      mint: getNextAccount(),
      tunaConfig: getNextAccount(),
      vault: getNextAccount(),
      vaultAta: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateVaultInstructionDataDecoder().decode(instruction.data),
  };
}
