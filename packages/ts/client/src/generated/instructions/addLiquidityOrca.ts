/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TUNA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADD_LIQUIDITY_ORCA_DISCRIMINATOR = new Uint8Array([
  185, 68, 41, 204, 33, 179, 12, 78,
]);

export function getAddLiquidityOrcaDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_LIQUIDITY_ORCA_DISCRIMINATOR
  );
}

export type AddLiquidityOrcaInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountTunaConfig extends string | IAccountMeta<string> = string,
  TAccountMintA extends string | IAccountMeta<string> = string,
  TAccountMintB extends string | IAccountMeta<string> = string,
  TAccountMarket extends string | IAccountMeta<string> = string,
  TAccountVaultA extends string | IAccountMeta<string> = string,
  TAccountVaultB extends string | IAccountMeta<string> = string,
  TAccountVaultAAta extends string | IAccountMeta<string> = string,
  TAccountVaultBAta extends string | IAccountMeta<string> = string,
  TAccountTunaPosition extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAta extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAtaA extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAtaB extends string | IAccountMeta<string> = string,
  TAccountTunaPositionOwnerAtaA extends string | IAccountMeta<string> = string,
  TAccountTunaPositionOwnerAtaB extends string | IAccountMeta<string> = string,
  TAccountFeeRecipientAtaA extends string | IAccountMeta<string> = string,
  TAccountFeeRecipientAtaB extends string | IAccountMeta<string> = string,
  TAccountPythOraclePriceFeedA extends string | IAccountMeta<string> = string,
  TAccountPythOraclePriceFeedB extends string | IAccountMeta<string> = string,
  TAccountWhirlpoolProgram extends string | IAccountMeta<string> = string,
  TAccountWhirlpool extends string | IAccountMeta<string> = string,
  TAccountOrcaPosition extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTunaConfig extends string
        ? ReadonlyAccount<TAccountTunaConfig>
        : TAccountTunaConfig,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountMintB extends string
        ? ReadonlyAccount<TAccountMintB>
        : TAccountMintB,
      TAccountMarket extends string
        ? WritableAccount<TAccountMarket>
        : TAccountMarket,
      TAccountVaultA extends string
        ? WritableAccount<TAccountVaultA>
        : TAccountVaultA,
      TAccountVaultB extends string
        ? WritableAccount<TAccountVaultB>
        : TAccountVaultB,
      TAccountVaultAAta extends string
        ? WritableAccount<TAccountVaultAAta>
        : TAccountVaultAAta,
      TAccountVaultBAta extends string
        ? WritableAccount<TAccountVaultBAta>
        : TAccountVaultBAta,
      TAccountTunaPosition extends string
        ? WritableAccount<TAccountTunaPosition>
        : TAccountTunaPosition,
      TAccountTunaPositionAta extends string
        ? WritableAccount<TAccountTunaPositionAta>
        : TAccountTunaPositionAta,
      TAccountTunaPositionAtaA extends string
        ? WritableAccount<TAccountTunaPositionAtaA>
        : TAccountTunaPositionAtaA,
      TAccountTunaPositionAtaB extends string
        ? WritableAccount<TAccountTunaPositionAtaB>
        : TAccountTunaPositionAtaB,
      TAccountTunaPositionOwnerAtaA extends string
        ? WritableAccount<TAccountTunaPositionOwnerAtaA>
        : TAccountTunaPositionOwnerAtaA,
      TAccountTunaPositionOwnerAtaB extends string
        ? WritableAccount<TAccountTunaPositionOwnerAtaB>
        : TAccountTunaPositionOwnerAtaB,
      TAccountFeeRecipientAtaA extends string
        ? WritableAccount<TAccountFeeRecipientAtaA>
        : TAccountFeeRecipientAtaA,
      TAccountFeeRecipientAtaB extends string
        ? WritableAccount<TAccountFeeRecipientAtaB>
        : TAccountFeeRecipientAtaB,
      TAccountPythOraclePriceFeedA extends string
        ? ReadonlyAccount<TAccountPythOraclePriceFeedA>
        : TAccountPythOraclePriceFeedA,
      TAccountPythOraclePriceFeedB extends string
        ? ReadonlyAccount<TAccountPythOraclePriceFeedB>
        : TAccountPythOraclePriceFeedB,
      TAccountWhirlpoolProgram extends string
        ? ReadonlyAccount<TAccountWhirlpoolProgram>
        : TAccountWhirlpoolProgram,
      TAccountWhirlpool extends string
        ? WritableAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountOrcaPosition extends string
        ? WritableAccount<TAccountOrcaPosition>
        : TAccountOrcaPosition,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AddLiquidityOrcaInstructionData = {
  discriminator: ReadonlyUint8Array;
  collateralA: bigint;
  collateralB: bigint;
  borrowA: bigint;
  borrowB: bigint;
  minAddedAmountA: bigint;
  minAddedAmountB: bigint;
  maxSwapSlippage: number;
};

export type AddLiquidityOrcaInstructionDataArgs = {
  collateralA: number | bigint;
  collateralB: number | bigint;
  borrowA: number | bigint;
  borrowB: number | bigint;
  minAddedAmountA: number | bigint;
  minAddedAmountB: number | bigint;
  maxSwapSlippage: number;
};

export function getAddLiquidityOrcaInstructionDataEncoder(): Encoder<AddLiquidityOrcaInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['collateralA', getU64Encoder()],
      ['collateralB', getU64Encoder()],
      ['borrowA', getU64Encoder()],
      ['borrowB', getU64Encoder()],
      ['minAddedAmountA', getU64Encoder()],
      ['minAddedAmountB', getU64Encoder()],
      ['maxSwapSlippage', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ADD_LIQUIDITY_ORCA_DISCRIMINATOR })
  );
}

export function getAddLiquidityOrcaInstructionDataDecoder(): Decoder<AddLiquidityOrcaInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['collateralA', getU64Decoder()],
    ['collateralB', getU64Decoder()],
    ['borrowA', getU64Decoder()],
    ['borrowB', getU64Decoder()],
    ['minAddedAmountA', getU64Decoder()],
    ['minAddedAmountB', getU64Decoder()],
    ['maxSwapSlippage', getU32Decoder()],
  ]);
}

export function getAddLiquidityOrcaInstructionDataCodec(): Codec<
  AddLiquidityOrcaInstructionDataArgs,
  AddLiquidityOrcaInstructionData
> {
  return combineCodec(
    getAddLiquidityOrcaInstructionDataEncoder(),
    getAddLiquidityOrcaInstructionDataDecoder()
  );
}

export type AddLiquidityOrcaInput<
  TAccountAuthority extends string = string,
  TAccountTunaConfig extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountMarket extends string = string,
  TAccountVaultA extends string = string,
  TAccountVaultB extends string = string,
  TAccountVaultAAta extends string = string,
  TAccountVaultBAta extends string = string,
  TAccountTunaPosition extends string = string,
  TAccountTunaPositionAta extends string = string,
  TAccountTunaPositionAtaA extends string = string,
  TAccountTunaPositionAtaB extends string = string,
  TAccountTunaPositionOwnerAtaA extends string = string,
  TAccountTunaPositionOwnerAtaB extends string = string,
  TAccountFeeRecipientAtaA extends string = string,
  TAccountFeeRecipientAtaB extends string = string,
  TAccountPythOraclePriceFeedA extends string = string,
  TAccountPythOraclePriceFeedB extends string = string,
  TAccountWhirlpoolProgram extends string = string,
  TAccountWhirlpool extends string = string,
  TAccountOrcaPosition extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /**
   *
   * TUNA accounts
   *
   */
  authority: TransactionSigner<TAccountAuthority>;
  tunaConfig: Address<TAccountTunaConfig>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  market: Address<TAccountMarket>;
  vaultA: Address<TAccountVaultA>;
  vaultB: Address<TAccountVaultB>;
  vaultAAta: Address<TAccountVaultAAta>;
  vaultBAta: Address<TAccountVaultBAta>;
  tunaPosition: Address<TAccountTunaPosition>;
  tunaPositionAta: Address<TAccountTunaPositionAta>;
  tunaPositionAtaA: Address<TAccountTunaPositionAtaA>;
  tunaPositionAtaB: Address<TAccountTunaPositionAtaB>;
  tunaPositionOwnerAtaA: Address<TAccountTunaPositionOwnerAtaA>;
  tunaPositionOwnerAtaB: Address<TAccountTunaPositionOwnerAtaB>;
  feeRecipientAtaA: Address<TAccountFeeRecipientAtaA>;
  feeRecipientAtaB: Address<TAccountFeeRecipientAtaB>;
  pythOraclePriceFeedA: Address<TAccountPythOraclePriceFeedA>;
  pythOraclePriceFeedB: Address<TAccountPythOraclePriceFeedB>;
  /**
   *
   * ORCA accounts
   *
   */
  whirlpoolProgram: Address<TAccountWhirlpoolProgram>;
  whirlpool: Address<TAccountWhirlpool>;
  orcaPosition: Address<TAccountOrcaPosition>;
  /**
   *
   * Other accounts
   *
   */
  tokenProgram?: Address<TAccountTokenProgram>;
  collateralA: AddLiquidityOrcaInstructionDataArgs['collateralA'];
  collateralB: AddLiquidityOrcaInstructionDataArgs['collateralB'];
  borrowA: AddLiquidityOrcaInstructionDataArgs['borrowA'];
  borrowB: AddLiquidityOrcaInstructionDataArgs['borrowB'];
  minAddedAmountA: AddLiquidityOrcaInstructionDataArgs['minAddedAmountA'];
  minAddedAmountB: AddLiquidityOrcaInstructionDataArgs['minAddedAmountB'];
  maxSwapSlippage: AddLiquidityOrcaInstructionDataArgs['maxSwapSlippage'];
};

export function getAddLiquidityOrcaInstruction<
  TAccountAuthority extends string,
  TAccountTunaConfig extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountMarket extends string,
  TAccountVaultA extends string,
  TAccountVaultB extends string,
  TAccountVaultAAta extends string,
  TAccountVaultBAta extends string,
  TAccountTunaPosition extends string,
  TAccountTunaPositionAta extends string,
  TAccountTunaPositionAtaA extends string,
  TAccountTunaPositionAtaB extends string,
  TAccountTunaPositionOwnerAtaA extends string,
  TAccountTunaPositionOwnerAtaB extends string,
  TAccountFeeRecipientAtaA extends string,
  TAccountFeeRecipientAtaB extends string,
  TAccountPythOraclePriceFeedA extends string,
  TAccountPythOraclePriceFeedB extends string,
  TAccountWhirlpoolProgram extends string,
  TAccountWhirlpool extends string,
  TAccountOrcaPosition extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof TUNA_PROGRAM_ADDRESS,
>(
  input: AddLiquidityOrcaInput<
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountMintA,
    TAccountMintB,
    TAccountMarket,
    TAccountVaultA,
    TAccountVaultB,
    TAccountVaultAAta,
    TAccountVaultBAta,
    TAccountTunaPosition,
    TAccountTunaPositionAta,
    TAccountTunaPositionAtaA,
    TAccountTunaPositionAtaB,
    TAccountTunaPositionOwnerAtaA,
    TAccountTunaPositionOwnerAtaB,
    TAccountFeeRecipientAtaA,
    TAccountFeeRecipientAtaB,
    TAccountPythOraclePriceFeedA,
    TAccountPythOraclePriceFeedB,
    TAccountWhirlpoolProgram,
    TAccountWhirlpool,
    TAccountOrcaPosition,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AddLiquidityOrcaInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountTunaConfig,
  TAccountMintA,
  TAccountMintB,
  TAccountMarket,
  TAccountVaultA,
  TAccountVaultB,
  TAccountVaultAAta,
  TAccountVaultBAta,
  TAccountTunaPosition,
  TAccountTunaPositionAta,
  TAccountTunaPositionAtaA,
  TAccountTunaPositionAtaB,
  TAccountTunaPositionOwnerAtaA,
  TAccountTunaPositionOwnerAtaB,
  TAccountFeeRecipientAtaA,
  TAccountFeeRecipientAtaB,
  TAccountPythOraclePriceFeedA,
  TAccountPythOraclePriceFeedB,
  TAccountWhirlpoolProgram,
  TAccountWhirlpool,
  TAccountOrcaPosition,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TUNA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    tunaConfig: { value: input.tunaConfig ?? null, isWritable: false },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    market: { value: input.market ?? null, isWritable: true },
    vaultA: { value: input.vaultA ?? null, isWritable: true },
    vaultB: { value: input.vaultB ?? null, isWritable: true },
    vaultAAta: { value: input.vaultAAta ?? null, isWritable: true },
    vaultBAta: { value: input.vaultBAta ?? null, isWritable: true },
    tunaPosition: { value: input.tunaPosition ?? null, isWritable: true },
    tunaPositionAta: { value: input.tunaPositionAta ?? null, isWritable: true },
    tunaPositionAtaA: {
      value: input.tunaPositionAtaA ?? null,
      isWritable: true,
    },
    tunaPositionAtaB: {
      value: input.tunaPositionAtaB ?? null,
      isWritable: true,
    },
    tunaPositionOwnerAtaA: {
      value: input.tunaPositionOwnerAtaA ?? null,
      isWritable: true,
    },
    tunaPositionOwnerAtaB: {
      value: input.tunaPositionOwnerAtaB ?? null,
      isWritable: true,
    },
    feeRecipientAtaA: {
      value: input.feeRecipientAtaA ?? null,
      isWritable: true,
    },
    feeRecipientAtaB: {
      value: input.feeRecipientAtaB ?? null,
      isWritable: true,
    },
    pythOraclePriceFeedA: {
      value: input.pythOraclePriceFeedA ?? null,
      isWritable: false,
    },
    pythOraclePriceFeedB: {
      value: input.pythOraclePriceFeedB ?? null,
      isWritable: false,
    },
    whirlpoolProgram: {
      value: input.whirlpoolProgram ?? null,
      isWritable: false,
    },
    whirlpool: { value: input.whirlpool ?? null, isWritable: true },
    orcaPosition: { value: input.orcaPosition ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tunaConfig),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.vaultA),
      getAccountMeta(accounts.vaultB),
      getAccountMeta(accounts.vaultAAta),
      getAccountMeta(accounts.vaultBAta),
      getAccountMeta(accounts.tunaPosition),
      getAccountMeta(accounts.tunaPositionAta),
      getAccountMeta(accounts.tunaPositionAtaA),
      getAccountMeta(accounts.tunaPositionAtaB),
      getAccountMeta(accounts.tunaPositionOwnerAtaA),
      getAccountMeta(accounts.tunaPositionOwnerAtaB),
      getAccountMeta(accounts.feeRecipientAtaA),
      getAccountMeta(accounts.feeRecipientAtaB),
      getAccountMeta(accounts.pythOraclePriceFeedA),
      getAccountMeta(accounts.pythOraclePriceFeedB),
      getAccountMeta(accounts.whirlpoolProgram),
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.orcaPosition),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getAddLiquidityOrcaInstructionDataEncoder().encode(
      args as AddLiquidityOrcaInstructionDataArgs
    ),
  } as AddLiquidityOrcaInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountMintA,
    TAccountMintB,
    TAccountMarket,
    TAccountVaultA,
    TAccountVaultB,
    TAccountVaultAAta,
    TAccountVaultBAta,
    TAccountTunaPosition,
    TAccountTunaPositionAta,
    TAccountTunaPositionAtaA,
    TAccountTunaPositionAtaB,
    TAccountTunaPositionOwnerAtaA,
    TAccountTunaPositionOwnerAtaB,
    TAccountFeeRecipientAtaA,
    TAccountFeeRecipientAtaB,
    TAccountPythOraclePriceFeedA,
    TAccountPythOraclePriceFeedB,
    TAccountWhirlpoolProgram,
    TAccountWhirlpool,
    TAccountOrcaPosition,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedAddLiquidityOrcaInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     *
     * TUNA accounts
     *
     */

    authority: TAccountMetas[0];
    tunaConfig: TAccountMetas[1];
    mintA: TAccountMetas[2];
    mintB: TAccountMetas[3];
    market: TAccountMetas[4];
    vaultA: TAccountMetas[5];
    vaultB: TAccountMetas[6];
    vaultAAta: TAccountMetas[7];
    vaultBAta: TAccountMetas[8];
    tunaPosition: TAccountMetas[9];
    tunaPositionAta: TAccountMetas[10];
    tunaPositionAtaA: TAccountMetas[11];
    tunaPositionAtaB: TAccountMetas[12];
    tunaPositionOwnerAtaA: TAccountMetas[13];
    tunaPositionOwnerAtaB: TAccountMetas[14];
    feeRecipientAtaA: TAccountMetas[15];
    feeRecipientAtaB: TAccountMetas[16];
    pythOraclePriceFeedA: TAccountMetas[17];
    pythOraclePriceFeedB: TAccountMetas[18];
    /**
     *
     * ORCA accounts
     *
     */

    whirlpoolProgram: TAccountMetas[19];
    whirlpool: TAccountMetas[20];
    orcaPosition: TAccountMetas[21];
    /**
     *
     * Other accounts
     *
     */

    tokenProgram: TAccountMetas[22];
  };
  data: AddLiquidityOrcaInstructionData;
};

export function parseAddLiquidityOrcaInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAddLiquidityOrcaInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 23) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      tunaConfig: getNextAccount(),
      mintA: getNextAccount(),
      mintB: getNextAccount(),
      market: getNextAccount(),
      vaultA: getNextAccount(),
      vaultB: getNextAccount(),
      vaultAAta: getNextAccount(),
      vaultBAta: getNextAccount(),
      tunaPosition: getNextAccount(),
      tunaPositionAta: getNextAccount(),
      tunaPositionAtaA: getNextAccount(),
      tunaPositionAtaB: getNextAccount(),
      tunaPositionOwnerAtaA: getNextAccount(),
      tunaPositionOwnerAtaB: getNextAccount(),
      feeRecipientAtaA: getNextAccount(),
      feeRecipientAtaB: getNextAccount(),
      pythOraclePriceFeedA: getNextAccount(),
      pythOraclePriceFeedB: getNextAccount(),
      whirlpoolProgram: getNextAccount(),
      whirlpool: getNextAccount(),
      orcaPosition: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getAddLiquidityOrcaInstructionDataDecoder().decode(instruction.data),
  };
}
