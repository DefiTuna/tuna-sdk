/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TUNA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const OPEN_LENDING_POSITION_DISCRIMINATOR = new Uint8Array([
  174, 227, 181, 127, 78, 227, 244, 19,
]);

export function getOpenLendingPositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    OPEN_LENDING_POSITION_DISCRIMINATOR
  );
}

export type OpenLendingPositionInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountTunaConfig extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountLendingPosition extends string | IAccountMeta<string> = string,
  TAccountPoolMint extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTunaConfig extends string
        ? ReadonlyAccount<TAccountTunaConfig>
        : TAccountTunaConfig,
      TAccountVault extends string
        ? ReadonlyAccount<TAccountVault>
        : TAccountVault,
      TAccountLendingPosition extends string
        ? WritableAccount<TAccountLendingPosition>
        : TAccountLendingPosition,
      TAccountPoolMint extends string
        ? ReadonlyAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type OpenLendingPositionInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type OpenLendingPositionInstructionDataArgs = {};

export function getOpenLendingPositionInstructionDataEncoder(): Encoder<OpenLendingPositionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: OPEN_LENDING_POSITION_DISCRIMINATOR,
    })
  );
}

export function getOpenLendingPositionInstructionDataDecoder(): Decoder<OpenLendingPositionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getOpenLendingPositionInstructionDataCodec(): Codec<
  OpenLendingPositionInstructionDataArgs,
  OpenLendingPositionInstructionData
> {
  return combineCodec(
    getOpenLendingPositionInstructionDataEncoder(),
    getOpenLendingPositionInstructionDataDecoder()
  );
}

export type OpenLendingPositionInput<
  TAccountAuthority extends string = string,
  TAccountTunaConfig extends string = string,
  TAccountVault extends string = string,
  TAccountLendingPosition extends string = string,
  TAccountPoolMint extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  tunaConfig: Address<TAccountTunaConfig>;
  vault: Address<TAccountVault>;
  lendingPosition: Address<TAccountLendingPosition>;
  poolMint: Address<TAccountPoolMint>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getOpenLendingPositionInstruction<
  TAccountAuthority extends string,
  TAccountTunaConfig extends string,
  TAccountVault extends string,
  TAccountLendingPosition extends string,
  TAccountPoolMint extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TUNA_PROGRAM_ADDRESS,
>(
  input: OpenLendingPositionInput<
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountVault,
    TAccountLendingPosition,
    TAccountPoolMint,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): OpenLendingPositionInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountTunaConfig,
  TAccountVault,
  TAccountLendingPosition,
  TAccountPoolMint,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TUNA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    tunaConfig: { value: input.tunaConfig ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: false },
    lendingPosition: { value: input.lendingPosition ?? null, isWritable: true },
    poolMint: { value: input.poolMint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tunaConfig),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.lendingPosition),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getOpenLendingPositionInstructionDataEncoder().encode({}),
  } as OpenLendingPositionInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountVault,
    TAccountLendingPosition,
    TAccountPoolMint,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedOpenLendingPositionInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    tunaConfig: TAccountMetas[1];
    vault: TAccountMetas[2];
    lendingPosition: TAccountMetas[3];
    poolMint: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: OpenLendingPositionInstructionData;
};

export function parseOpenLendingPositionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedOpenLendingPositionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      tunaConfig: getNextAccount(),
      vault: getNextAccount(),
      lendingPosition: getNextAccount(),
      poolMint: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getOpenLendingPositionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
