/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TUNA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_MARKET_DISCRIMINATOR = new Uint8Array([
  153, 39, 2, 197, 179, 50, 199, 217,
]);

export function getUpdateMarketDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_MARKET_DISCRIMINATOR
  );
}

export type UpdateMarketInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountTunaConfig extends string | IAccountMeta<string> = string,
  TAccountMarket extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTunaConfig extends string
        ? ReadonlyAccount<TAccountTunaConfig>
        : TAccountTunaConfig,
      TAccountMarket extends string
        ? WritableAccount<TAccountMarket>
        : TAccountMarket,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateMarketInstructionData = {
  discriminator: ReadonlyUint8Array;
  addressLookupTable: Address;
  maxLeverage: number;
  protocolFee: number;
  protocolFeeOnCollateral: number;
  liquidationFee: number;
  liquidationRatio: number;
  limitOrderExecutionFee: number;
  oraclePriceDeviationThreshold: number;
  disabled: boolean;
  borrowLimitA: bigint;
  borrowLimitB: bigint;
  maxSwapSlippage: number;
};

export type UpdateMarketInstructionDataArgs = {
  addressLookupTable: Address;
  maxLeverage: number;
  protocolFee: number;
  protocolFeeOnCollateral: number;
  liquidationFee: number;
  liquidationRatio: number;
  limitOrderExecutionFee: number;
  oraclePriceDeviationThreshold: number;
  disabled: boolean;
  borrowLimitA: number | bigint;
  borrowLimitB: number | bigint;
  maxSwapSlippage: number;
};

export function getUpdateMarketInstructionDataEncoder(): Encoder<UpdateMarketInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['addressLookupTable', getAddressEncoder()],
      ['maxLeverage', getU32Encoder()],
      ['protocolFee', getU16Encoder()],
      ['protocolFeeOnCollateral', getU16Encoder()],
      ['liquidationFee', getU32Encoder()],
      ['liquidationRatio', getU32Encoder()],
      ['limitOrderExecutionFee', getU32Encoder()],
      ['oraclePriceDeviationThreshold', getU32Encoder()],
      ['disabled', getBooleanEncoder()],
      ['borrowLimitA', getU64Encoder()],
      ['borrowLimitB', getU64Encoder()],
      ['maxSwapSlippage', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_MARKET_DISCRIMINATOR })
  );
}

export function getUpdateMarketInstructionDataDecoder(): Decoder<UpdateMarketInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['addressLookupTable', getAddressDecoder()],
    ['maxLeverage', getU32Decoder()],
    ['protocolFee', getU16Decoder()],
    ['protocolFeeOnCollateral', getU16Decoder()],
    ['liquidationFee', getU32Decoder()],
    ['liquidationRatio', getU32Decoder()],
    ['limitOrderExecutionFee', getU32Decoder()],
    ['oraclePriceDeviationThreshold', getU32Decoder()],
    ['disabled', getBooleanDecoder()],
    ['borrowLimitA', getU64Decoder()],
    ['borrowLimitB', getU64Decoder()],
    ['maxSwapSlippage', getU32Decoder()],
  ]);
}

export function getUpdateMarketInstructionDataCodec(): Codec<
  UpdateMarketInstructionDataArgs,
  UpdateMarketInstructionData
> {
  return combineCodec(
    getUpdateMarketInstructionDataEncoder(),
    getUpdateMarketInstructionDataDecoder()
  );
}

export type UpdateMarketInput<
  TAccountAuthority extends string = string,
  TAccountTunaConfig extends string = string,
  TAccountMarket extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  tunaConfig: Address<TAccountTunaConfig>;
  market: Address<TAccountMarket>;
  addressLookupTable: UpdateMarketInstructionDataArgs['addressLookupTable'];
  maxLeverage: UpdateMarketInstructionDataArgs['maxLeverage'];
  protocolFee: UpdateMarketInstructionDataArgs['protocolFee'];
  protocolFeeOnCollateral: UpdateMarketInstructionDataArgs['protocolFeeOnCollateral'];
  liquidationFee: UpdateMarketInstructionDataArgs['liquidationFee'];
  liquidationRatio: UpdateMarketInstructionDataArgs['liquidationRatio'];
  limitOrderExecutionFee: UpdateMarketInstructionDataArgs['limitOrderExecutionFee'];
  oraclePriceDeviationThreshold: UpdateMarketInstructionDataArgs['oraclePriceDeviationThreshold'];
  disabled: UpdateMarketInstructionDataArgs['disabled'];
  borrowLimitA: UpdateMarketInstructionDataArgs['borrowLimitA'];
  borrowLimitB: UpdateMarketInstructionDataArgs['borrowLimitB'];
  maxSwapSlippage: UpdateMarketInstructionDataArgs['maxSwapSlippage'];
};

export function getUpdateMarketInstruction<
  TAccountAuthority extends string,
  TAccountTunaConfig extends string,
  TAccountMarket extends string,
  TProgramAddress extends Address = typeof TUNA_PROGRAM_ADDRESS,
>(
  input: UpdateMarketInput<
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountMarket
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateMarketInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountTunaConfig,
  TAccountMarket
> {
  // Program address.
  const programAddress = config?.programAddress ?? TUNA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    tunaConfig: { value: input.tunaConfig ?? null, isWritable: false },
    market: { value: input.market ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tunaConfig),
      getAccountMeta(accounts.market),
    ],
    programAddress,
    data: getUpdateMarketInstructionDataEncoder().encode(
      args as UpdateMarketInstructionDataArgs
    ),
  } as UpdateMarketInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountMarket
  >;

  return instruction;
}

export type ParsedUpdateMarketInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    tunaConfig: TAccountMetas[1];
    market: TAccountMetas[2];
  };
  data: UpdateMarketInstructionData;
};

export function parseUpdateMarketInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateMarketInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      tunaConfig: getNextAccount(),
      market: getNextAccount(),
    },
    data: getUpdateMarketInstructionDataDecoder().decode(instruction.data),
  };
}
