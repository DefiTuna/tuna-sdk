/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TUNA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const OPEN_POSITION_WITH_LIQUIDITY_ORCA_DISCRIMINATOR = new Uint8Array([
  163, 21, 84, 199, 172, 40, 87, 122,
]);

export function getOpenPositionWithLiquidityOrcaDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    OPEN_POSITION_WITH_LIQUIDITY_ORCA_DISCRIMINATOR
  );
}

export type OpenPositionWithLiquidityOrcaInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountTunaConfig extends string | IAccountMeta<string> = string,
  TAccountMintA extends string | IAccountMeta<string> = string,
  TAccountMintB extends string | IAccountMeta<string> = string,
  TAccountMarket extends string | IAccountMeta<string> = string,
  TAccountVaultA extends string | IAccountMeta<string> = string,
  TAccountVaultB extends string | IAccountMeta<string> = string,
  TAccountVaultAAta extends string | IAccountMeta<string> = string,
  TAccountVaultBAta extends string | IAccountMeta<string> = string,
  TAccountTunaPosition extends string | IAccountMeta<string> = string,
  TAccountTunaPositionMint extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAta extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAtaA extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAtaB extends string | IAccountMeta<string> = string,
  TAccountTunaPositionOwnerAtaA extends string | IAccountMeta<string> = string,
  TAccountTunaPositionOwnerAtaB extends string | IAccountMeta<string> = string,
  TAccountFeeRecipientAtaA extends string | IAccountMeta<string> = string,
  TAccountFeeRecipientAtaB extends string | IAccountMeta<string> = string,
  TAccountPythOraclePriceFeedA extends string | IAccountMeta<string> = string,
  TAccountPythOraclePriceFeedB extends string | IAccountMeta<string> = string,
  TAccountWhirlpoolProgram extends string | IAccountMeta<string> = string,
  TAccountWhirlpool extends string | IAccountMeta<string> = string,
  TAccountTokenProgramA extends string | IAccountMeta<string> = string,
  TAccountTokenProgramB extends string | IAccountMeta<string> = string,
  TAccountMemoProgram extends string | IAccountMeta<string> = string,
  TAccountToken2022Program extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTunaConfig extends string
        ? ReadonlyAccount<TAccountTunaConfig>
        : TAccountTunaConfig,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountMintB extends string
        ? ReadonlyAccount<TAccountMintB>
        : TAccountMintB,
      TAccountMarket extends string
        ? WritableAccount<TAccountMarket>
        : TAccountMarket,
      TAccountVaultA extends string
        ? WritableAccount<TAccountVaultA>
        : TAccountVaultA,
      TAccountVaultB extends string
        ? WritableAccount<TAccountVaultB>
        : TAccountVaultB,
      TAccountVaultAAta extends string
        ? WritableAccount<TAccountVaultAAta>
        : TAccountVaultAAta,
      TAccountVaultBAta extends string
        ? WritableAccount<TAccountVaultBAta>
        : TAccountVaultBAta,
      TAccountTunaPosition extends string
        ? WritableAccount<TAccountTunaPosition>
        : TAccountTunaPosition,
      TAccountTunaPositionMint extends string
        ? WritableSignerAccount<TAccountTunaPositionMint> &
            IAccountSignerMeta<TAccountTunaPositionMint>
        : TAccountTunaPositionMint,
      TAccountTunaPositionAta extends string
        ? WritableAccount<TAccountTunaPositionAta>
        : TAccountTunaPositionAta,
      TAccountTunaPositionAtaA extends string
        ? WritableAccount<TAccountTunaPositionAtaA>
        : TAccountTunaPositionAtaA,
      TAccountTunaPositionAtaB extends string
        ? WritableAccount<TAccountTunaPositionAtaB>
        : TAccountTunaPositionAtaB,
      TAccountTunaPositionOwnerAtaA extends string
        ? WritableAccount<TAccountTunaPositionOwnerAtaA>
        : TAccountTunaPositionOwnerAtaA,
      TAccountTunaPositionOwnerAtaB extends string
        ? WritableAccount<TAccountTunaPositionOwnerAtaB>
        : TAccountTunaPositionOwnerAtaB,
      TAccountFeeRecipientAtaA extends string
        ? WritableAccount<TAccountFeeRecipientAtaA>
        : TAccountFeeRecipientAtaA,
      TAccountFeeRecipientAtaB extends string
        ? WritableAccount<TAccountFeeRecipientAtaB>
        : TAccountFeeRecipientAtaB,
      TAccountPythOraclePriceFeedA extends string
        ? ReadonlyAccount<TAccountPythOraclePriceFeedA>
        : TAccountPythOraclePriceFeedA,
      TAccountPythOraclePriceFeedB extends string
        ? ReadonlyAccount<TAccountPythOraclePriceFeedB>
        : TAccountPythOraclePriceFeedB,
      TAccountWhirlpoolProgram extends string
        ? ReadonlyAccount<TAccountWhirlpoolProgram>
        : TAccountWhirlpoolProgram,
      TAccountWhirlpool extends string
        ? WritableAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountTokenProgramA extends string
        ? ReadonlyAccount<TAccountTokenProgramA>
        : TAccountTokenProgramA,
      TAccountTokenProgramB extends string
        ? ReadonlyAccount<TAccountTokenProgramB>
        : TAccountTokenProgramB,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type OpenPositionWithLiquidityOrcaInstructionData = {
  discriminator: ReadonlyUint8Array;
  tickLowerIndex: number;
  tickUpperIndex: number;
  tickStopLossIndex: number;
  tickTakeProfitIndex: number;
  flags: number;
  collateralA: bigint;
  collateralB: bigint;
  borrowA: bigint;
  borrowB: bigint;
  minAddedAmountA: bigint;
  minAddedAmountB: bigint;
  maxSwapSlippage: number;
};

export type OpenPositionWithLiquidityOrcaInstructionDataArgs = {
  tickLowerIndex: number;
  tickUpperIndex: number;
  tickStopLossIndex: number;
  tickTakeProfitIndex: number;
  flags: number;
  collateralA: number | bigint;
  collateralB: number | bigint;
  borrowA: number | bigint;
  borrowB: number | bigint;
  minAddedAmountA: number | bigint;
  minAddedAmountB: number | bigint;
  maxSwapSlippage: number;
};

export function getOpenPositionWithLiquidityOrcaInstructionDataEncoder(): Encoder<OpenPositionWithLiquidityOrcaInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['tickLowerIndex', getI32Encoder()],
      ['tickUpperIndex', getI32Encoder()],
      ['tickStopLossIndex', getI32Encoder()],
      ['tickTakeProfitIndex', getI32Encoder()],
      ['flags', getU32Encoder()],
      ['collateralA', getU64Encoder()],
      ['collateralB', getU64Encoder()],
      ['borrowA', getU64Encoder()],
      ['borrowB', getU64Encoder()],
      ['minAddedAmountA', getU64Encoder()],
      ['minAddedAmountB', getU64Encoder()],
      ['maxSwapSlippage', getU32Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: OPEN_POSITION_WITH_LIQUIDITY_ORCA_DISCRIMINATOR,
    })
  );
}

export function getOpenPositionWithLiquidityOrcaInstructionDataDecoder(): Decoder<OpenPositionWithLiquidityOrcaInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['tickLowerIndex', getI32Decoder()],
    ['tickUpperIndex', getI32Decoder()],
    ['tickStopLossIndex', getI32Decoder()],
    ['tickTakeProfitIndex', getI32Decoder()],
    ['flags', getU32Decoder()],
    ['collateralA', getU64Decoder()],
    ['collateralB', getU64Decoder()],
    ['borrowA', getU64Decoder()],
    ['borrowB', getU64Decoder()],
    ['minAddedAmountA', getU64Decoder()],
    ['minAddedAmountB', getU64Decoder()],
    ['maxSwapSlippage', getU32Decoder()],
  ]);
}

export function getOpenPositionWithLiquidityOrcaInstructionDataCodec(): Codec<
  OpenPositionWithLiquidityOrcaInstructionDataArgs,
  OpenPositionWithLiquidityOrcaInstructionData
> {
  return combineCodec(
    getOpenPositionWithLiquidityOrcaInstructionDataEncoder(),
    getOpenPositionWithLiquidityOrcaInstructionDataDecoder()
  );
}

export type OpenPositionWithLiquidityOrcaInput<
  TAccountAuthority extends string = string,
  TAccountTunaConfig extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountMarket extends string = string,
  TAccountVaultA extends string = string,
  TAccountVaultB extends string = string,
  TAccountVaultAAta extends string = string,
  TAccountVaultBAta extends string = string,
  TAccountTunaPosition extends string = string,
  TAccountTunaPositionMint extends string = string,
  TAccountTunaPositionAta extends string = string,
  TAccountTunaPositionAtaA extends string = string,
  TAccountTunaPositionAtaB extends string = string,
  TAccountTunaPositionOwnerAtaA extends string = string,
  TAccountTunaPositionOwnerAtaB extends string = string,
  TAccountFeeRecipientAtaA extends string = string,
  TAccountFeeRecipientAtaB extends string = string,
  TAccountPythOraclePriceFeedA extends string = string,
  TAccountPythOraclePriceFeedB extends string = string,
  TAccountWhirlpoolProgram extends string = string,
  TAccountWhirlpool extends string = string,
  TAccountTokenProgramA extends string = string,
  TAccountTokenProgramB extends string = string,
  TAccountMemoProgram extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  /**
   *
   * TUNA accounts
   *
   */
  authority: TransactionSigner<TAccountAuthority>;
  tunaConfig: Address<TAccountTunaConfig>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  market: Address<TAccountMarket>;
  vaultA: Address<TAccountVaultA>;
  vaultB: Address<TAccountVaultB>;
  vaultAAta: Address<TAccountVaultAAta>;
  vaultBAta: Address<TAccountVaultBAta>;
  tunaPosition: Address<TAccountTunaPosition>;
  tunaPositionMint: TransactionSigner<TAccountTunaPositionMint>;
  tunaPositionAta: Address<TAccountTunaPositionAta>;
  tunaPositionAtaA: Address<TAccountTunaPositionAtaA>;
  tunaPositionAtaB: Address<TAccountTunaPositionAtaB>;
  tunaPositionOwnerAtaA: Address<TAccountTunaPositionOwnerAtaA>;
  tunaPositionOwnerAtaB: Address<TAccountTunaPositionOwnerAtaB>;
  feeRecipientAtaA: Address<TAccountFeeRecipientAtaA>;
  feeRecipientAtaB: Address<TAccountFeeRecipientAtaB>;
  pythOraclePriceFeedA: Address<TAccountPythOraclePriceFeedA>;
  pythOraclePriceFeedB: Address<TAccountPythOraclePriceFeedB>;
  /**
   *
   * ORCA accounts
   *
   */
  whirlpoolProgram: Address<TAccountWhirlpoolProgram>;
  whirlpool: Address<TAccountWhirlpool>;
  /**
   *
   * Other accounts
   *
   */
  tokenProgramA: Address<TAccountTokenProgramA>;
  tokenProgramB: Address<TAccountTokenProgramB>;
  memoProgram: Address<TAccountMemoProgram>;
  token2022Program: Address<TAccountToken2022Program>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  tickLowerIndex: OpenPositionWithLiquidityOrcaInstructionDataArgs['tickLowerIndex'];
  tickUpperIndex: OpenPositionWithLiquidityOrcaInstructionDataArgs['tickUpperIndex'];
  tickStopLossIndex: OpenPositionWithLiquidityOrcaInstructionDataArgs['tickStopLossIndex'];
  tickTakeProfitIndex: OpenPositionWithLiquidityOrcaInstructionDataArgs['tickTakeProfitIndex'];
  flags: OpenPositionWithLiquidityOrcaInstructionDataArgs['flags'];
  collateralA: OpenPositionWithLiquidityOrcaInstructionDataArgs['collateralA'];
  collateralB: OpenPositionWithLiquidityOrcaInstructionDataArgs['collateralB'];
  borrowA: OpenPositionWithLiquidityOrcaInstructionDataArgs['borrowA'];
  borrowB: OpenPositionWithLiquidityOrcaInstructionDataArgs['borrowB'];
  minAddedAmountA: OpenPositionWithLiquidityOrcaInstructionDataArgs['minAddedAmountA'];
  minAddedAmountB: OpenPositionWithLiquidityOrcaInstructionDataArgs['minAddedAmountB'];
  maxSwapSlippage: OpenPositionWithLiquidityOrcaInstructionDataArgs['maxSwapSlippage'];
};

export function getOpenPositionWithLiquidityOrcaInstruction<
  TAccountAuthority extends string,
  TAccountTunaConfig extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountMarket extends string,
  TAccountVaultA extends string,
  TAccountVaultB extends string,
  TAccountVaultAAta extends string,
  TAccountVaultBAta extends string,
  TAccountTunaPosition extends string,
  TAccountTunaPositionMint extends string,
  TAccountTunaPositionAta extends string,
  TAccountTunaPositionAtaA extends string,
  TAccountTunaPositionAtaB extends string,
  TAccountTunaPositionOwnerAtaA extends string,
  TAccountTunaPositionOwnerAtaB extends string,
  TAccountFeeRecipientAtaA extends string,
  TAccountFeeRecipientAtaB extends string,
  TAccountPythOraclePriceFeedA extends string,
  TAccountPythOraclePriceFeedB extends string,
  TAccountWhirlpoolProgram extends string,
  TAccountWhirlpool extends string,
  TAccountTokenProgramA extends string,
  TAccountTokenProgramB extends string,
  TAccountMemoProgram extends string,
  TAccountToken2022Program extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof TUNA_PROGRAM_ADDRESS,
>(
  input: OpenPositionWithLiquidityOrcaInput<
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountMintA,
    TAccountMintB,
    TAccountMarket,
    TAccountVaultA,
    TAccountVaultB,
    TAccountVaultAAta,
    TAccountVaultBAta,
    TAccountTunaPosition,
    TAccountTunaPositionMint,
    TAccountTunaPositionAta,
    TAccountTunaPositionAtaA,
    TAccountTunaPositionAtaB,
    TAccountTunaPositionOwnerAtaA,
    TAccountTunaPositionOwnerAtaB,
    TAccountFeeRecipientAtaA,
    TAccountFeeRecipientAtaB,
    TAccountPythOraclePriceFeedA,
    TAccountPythOraclePriceFeedB,
    TAccountWhirlpoolProgram,
    TAccountWhirlpool,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountMemoProgram,
    TAccountToken2022Program,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): OpenPositionWithLiquidityOrcaInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountTunaConfig,
  TAccountMintA,
  TAccountMintB,
  TAccountMarket,
  TAccountVaultA,
  TAccountVaultB,
  TAccountVaultAAta,
  TAccountVaultBAta,
  TAccountTunaPosition,
  TAccountTunaPositionMint,
  TAccountTunaPositionAta,
  TAccountTunaPositionAtaA,
  TAccountTunaPositionAtaB,
  TAccountTunaPositionOwnerAtaA,
  TAccountTunaPositionOwnerAtaB,
  TAccountFeeRecipientAtaA,
  TAccountFeeRecipientAtaB,
  TAccountPythOraclePriceFeedA,
  TAccountPythOraclePriceFeedB,
  TAccountWhirlpoolProgram,
  TAccountWhirlpool,
  TAccountTokenProgramA,
  TAccountTokenProgramB,
  TAccountMemoProgram,
  TAccountToken2022Program,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TUNA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    tunaConfig: { value: input.tunaConfig ?? null, isWritable: false },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    market: { value: input.market ?? null, isWritable: true },
    vaultA: { value: input.vaultA ?? null, isWritable: true },
    vaultB: { value: input.vaultB ?? null, isWritable: true },
    vaultAAta: { value: input.vaultAAta ?? null, isWritable: true },
    vaultBAta: { value: input.vaultBAta ?? null, isWritable: true },
    tunaPosition: { value: input.tunaPosition ?? null, isWritable: true },
    tunaPositionMint: {
      value: input.tunaPositionMint ?? null,
      isWritable: true,
    },
    tunaPositionAta: { value: input.tunaPositionAta ?? null, isWritable: true },
    tunaPositionAtaA: {
      value: input.tunaPositionAtaA ?? null,
      isWritable: true,
    },
    tunaPositionAtaB: {
      value: input.tunaPositionAtaB ?? null,
      isWritable: true,
    },
    tunaPositionOwnerAtaA: {
      value: input.tunaPositionOwnerAtaA ?? null,
      isWritable: true,
    },
    tunaPositionOwnerAtaB: {
      value: input.tunaPositionOwnerAtaB ?? null,
      isWritable: true,
    },
    feeRecipientAtaA: {
      value: input.feeRecipientAtaA ?? null,
      isWritable: true,
    },
    feeRecipientAtaB: {
      value: input.feeRecipientAtaB ?? null,
      isWritable: true,
    },
    pythOraclePriceFeedA: {
      value: input.pythOraclePriceFeedA ?? null,
      isWritable: false,
    },
    pythOraclePriceFeedB: {
      value: input.pythOraclePriceFeedB ?? null,
      isWritable: false,
    },
    whirlpoolProgram: {
      value: input.whirlpoolProgram ?? null,
      isWritable: false,
    },
    whirlpool: { value: input.whirlpool ?? null, isWritable: true },
    tokenProgramA: { value: input.tokenProgramA ?? null, isWritable: false },
    tokenProgramB: { value: input.tokenProgramB ?? null, isWritable: false },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tunaConfig),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.vaultA),
      getAccountMeta(accounts.vaultB),
      getAccountMeta(accounts.vaultAAta),
      getAccountMeta(accounts.vaultBAta),
      getAccountMeta(accounts.tunaPosition),
      getAccountMeta(accounts.tunaPositionMint),
      getAccountMeta(accounts.tunaPositionAta),
      getAccountMeta(accounts.tunaPositionAtaA),
      getAccountMeta(accounts.tunaPositionAtaB),
      getAccountMeta(accounts.tunaPositionOwnerAtaA),
      getAccountMeta(accounts.tunaPositionOwnerAtaB),
      getAccountMeta(accounts.feeRecipientAtaA),
      getAccountMeta(accounts.feeRecipientAtaB),
      getAccountMeta(accounts.pythOraclePriceFeedA),
      getAccountMeta(accounts.pythOraclePriceFeedB),
      getAccountMeta(accounts.whirlpoolProgram),
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.tokenProgramA),
      getAccountMeta(accounts.tokenProgramB),
      getAccountMeta(accounts.memoProgram),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getOpenPositionWithLiquidityOrcaInstructionDataEncoder().encode(
      args as OpenPositionWithLiquidityOrcaInstructionDataArgs
    ),
  } as OpenPositionWithLiquidityOrcaInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountMintA,
    TAccountMintB,
    TAccountMarket,
    TAccountVaultA,
    TAccountVaultB,
    TAccountVaultAAta,
    TAccountVaultBAta,
    TAccountTunaPosition,
    TAccountTunaPositionMint,
    TAccountTunaPositionAta,
    TAccountTunaPositionAtaA,
    TAccountTunaPositionAtaB,
    TAccountTunaPositionOwnerAtaA,
    TAccountTunaPositionOwnerAtaB,
    TAccountFeeRecipientAtaA,
    TAccountFeeRecipientAtaB,
    TAccountPythOraclePriceFeedA,
    TAccountPythOraclePriceFeedB,
    TAccountWhirlpoolProgram,
    TAccountWhirlpool,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountMemoProgram,
    TAccountToken2022Program,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedOpenPositionWithLiquidityOrcaInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     *
     * TUNA accounts
     *
     */

    authority: TAccountMetas[0];
    tunaConfig: TAccountMetas[1];
    mintA: TAccountMetas[2];
    mintB: TAccountMetas[3];
    market: TAccountMetas[4];
    vaultA: TAccountMetas[5];
    vaultB: TAccountMetas[6];
    vaultAAta: TAccountMetas[7];
    vaultBAta: TAccountMetas[8];
    tunaPosition: TAccountMetas[9];
    tunaPositionMint: TAccountMetas[10];
    tunaPositionAta: TAccountMetas[11];
    tunaPositionAtaA: TAccountMetas[12];
    tunaPositionAtaB: TAccountMetas[13];
    tunaPositionOwnerAtaA: TAccountMetas[14];
    tunaPositionOwnerAtaB: TAccountMetas[15];
    feeRecipientAtaA: TAccountMetas[16];
    feeRecipientAtaB: TAccountMetas[17];
    pythOraclePriceFeedA: TAccountMetas[18];
    pythOraclePriceFeedB: TAccountMetas[19];
    /**
     *
     * ORCA accounts
     *
     */

    whirlpoolProgram: TAccountMetas[20];
    whirlpool: TAccountMetas[21];
    /**
     *
     * Other accounts
     *
     */

    tokenProgramA: TAccountMetas[22];
    tokenProgramB: TAccountMetas[23];
    memoProgram: TAccountMetas[24];
    token2022Program: TAccountMetas[25];
    systemProgram: TAccountMetas[26];
    associatedTokenProgram: TAccountMetas[27];
  };
  data: OpenPositionWithLiquidityOrcaInstructionData;
};

export function parseOpenPositionWithLiquidityOrcaInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedOpenPositionWithLiquidityOrcaInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 28) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      tunaConfig: getNextAccount(),
      mintA: getNextAccount(),
      mintB: getNextAccount(),
      market: getNextAccount(),
      vaultA: getNextAccount(),
      vaultB: getNextAccount(),
      vaultAAta: getNextAccount(),
      vaultBAta: getNextAccount(),
      tunaPosition: getNextAccount(),
      tunaPositionMint: getNextAccount(),
      tunaPositionAta: getNextAccount(),
      tunaPositionAtaA: getNextAccount(),
      tunaPositionAtaB: getNextAccount(),
      tunaPositionOwnerAtaA: getNextAccount(),
      tunaPositionOwnerAtaB: getNextAccount(),
      feeRecipientAtaA: getNextAccount(),
      feeRecipientAtaB: getNextAccount(),
      pythOraclePriceFeedA: getNextAccount(),
      pythOraclePriceFeedB: getNextAccount(),
      whirlpoolProgram: getNextAccount(),
      whirlpool: getNextAccount(),
      tokenProgramA: getNextAccount(),
      tokenProgramB: getNextAccount(),
      memoProgram: getNextAccount(),
      token2022Program: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getOpenPositionWithLiquidityOrcaInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
