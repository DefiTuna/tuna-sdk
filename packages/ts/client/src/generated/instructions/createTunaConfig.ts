/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TUNA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CREATE_TUNA_CONFIG_DISCRIMINATOR = new Uint8Array([
  79, 78, 175, 62, 234, 68, 202, 241,
]);

export function getCreateTunaConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_TUNA_CONFIG_DISCRIMINATOR
  );
}

export type CreateTunaConfigInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountTunaConfig extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTunaConfig extends string
        ? WritableAccount<TAccountTunaConfig>
        : TAccountTunaConfig,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type CreateTunaConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  ownerAuthority: Address;
  adminAuthority: Address;
  liquidatorAuthority: Address;
  feeRecipient: Address;
};

export type CreateTunaConfigInstructionDataArgs = {
  ownerAuthority: Address;
  adminAuthority: Address;
  liquidatorAuthority: Address;
  feeRecipient: Address;
};

export function getCreateTunaConfigInstructionDataEncoder(): Encoder<CreateTunaConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['ownerAuthority', getAddressEncoder()],
      ['adminAuthority', getAddressEncoder()],
      ['liquidatorAuthority', getAddressEncoder()],
      ['feeRecipient', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_TUNA_CONFIG_DISCRIMINATOR })
  );
}

export function getCreateTunaConfigInstructionDataDecoder(): Decoder<CreateTunaConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['ownerAuthority', getAddressDecoder()],
    ['adminAuthority', getAddressDecoder()],
    ['liquidatorAuthority', getAddressDecoder()],
    ['feeRecipient', getAddressDecoder()],
  ]);
}

export function getCreateTunaConfigInstructionDataCodec(): Codec<
  CreateTunaConfigInstructionDataArgs,
  CreateTunaConfigInstructionData
> {
  return combineCodec(
    getCreateTunaConfigInstructionDataEncoder(),
    getCreateTunaConfigInstructionDataDecoder()
  );
}

export type CreateTunaConfigInput<
  TAccountAuthority extends string = string,
  TAccountTunaConfig extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  tunaConfig: Address<TAccountTunaConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  ownerAuthority: CreateTunaConfigInstructionDataArgs['ownerAuthority'];
  adminAuthority: CreateTunaConfigInstructionDataArgs['adminAuthority'];
  liquidatorAuthority: CreateTunaConfigInstructionDataArgs['liquidatorAuthority'];
  feeRecipient: CreateTunaConfigInstructionDataArgs['feeRecipient'];
};

export function getCreateTunaConfigInstruction<
  TAccountAuthority extends string,
  TAccountTunaConfig extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof TUNA_PROGRAM_ADDRESS,
>(
  input: CreateTunaConfigInput<
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): CreateTunaConfigInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountTunaConfig,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? TUNA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    tunaConfig: { value: input.tunaConfig ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tunaConfig),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getCreateTunaConfigInstructionDataEncoder().encode(
      args as CreateTunaConfigInstructionDataArgs
    ),
  } as CreateTunaConfigInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedCreateTunaConfigInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    tunaConfig: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
    rent: TAccountMetas[3];
  };
  data: CreateTunaConfigInstructionData;
};

export function parseCreateTunaConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateTunaConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      tunaConfig: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getCreateTunaConfigInstructionDataDecoder().decode(instruction.data),
  };
}
