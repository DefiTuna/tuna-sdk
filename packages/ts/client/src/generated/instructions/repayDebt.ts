/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TUNA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REPAY_DEBT_DISCRIMINATOR = new Uint8Array([
  79, 200, 30, 15, 252, 22, 162, 8,
]);

export function getRepayDebtDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(REPAY_DEBT_DISCRIMINATOR);
}

export type RepayDebtInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountMintA extends string | IAccountMeta<string> = string,
  TAccountMintB extends string | IAccountMeta<string> = string,
  TAccountMarket extends string | IAccountMeta<string> = string,
  TAccountVaultA extends string | IAccountMeta<string> = string,
  TAccountVaultB extends string | IAccountMeta<string> = string,
  TAccountVaultAAta extends string | IAccountMeta<string> = string,
  TAccountVaultBAta extends string | IAccountMeta<string> = string,
  TAccountTunaPosition extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAtaA extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAtaB extends string | IAccountMeta<string> = string,
  TAccountTunaPositionOwnerAtaA extends string | IAccountMeta<string> = string,
  TAccountTunaPositionOwnerAtaB extends string | IAccountMeta<string> = string,
  TAccountTokenProgramA extends string | IAccountMeta<string> = string,
  TAccountTokenProgramB extends string | IAccountMeta<string> = string,
  TAccountMemoProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountMintB extends string
        ? ReadonlyAccount<TAccountMintB>
        : TAccountMintB,
      TAccountMarket extends string
        ? ReadonlyAccount<TAccountMarket>
        : TAccountMarket,
      TAccountVaultA extends string
        ? WritableAccount<TAccountVaultA>
        : TAccountVaultA,
      TAccountVaultB extends string
        ? WritableAccount<TAccountVaultB>
        : TAccountVaultB,
      TAccountVaultAAta extends string
        ? WritableAccount<TAccountVaultAAta>
        : TAccountVaultAAta,
      TAccountVaultBAta extends string
        ? WritableAccount<TAccountVaultBAta>
        : TAccountVaultBAta,
      TAccountTunaPosition extends string
        ? WritableAccount<TAccountTunaPosition>
        : TAccountTunaPosition,
      TAccountTunaPositionAtaA extends string
        ? WritableAccount<TAccountTunaPositionAtaA>
        : TAccountTunaPositionAtaA,
      TAccountTunaPositionAtaB extends string
        ? WritableAccount<TAccountTunaPositionAtaB>
        : TAccountTunaPositionAtaB,
      TAccountTunaPositionOwnerAtaA extends string
        ? WritableAccount<TAccountTunaPositionOwnerAtaA>
        : TAccountTunaPositionOwnerAtaA,
      TAccountTunaPositionOwnerAtaB extends string
        ? WritableAccount<TAccountTunaPositionOwnerAtaB>
        : TAccountTunaPositionOwnerAtaB,
      TAccountTokenProgramA extends string
        ? ReadonlyAccount<TAccountTokenProgramA>
        : TAccountTokenProgramA,
      TAccountTokenProgramB extends string
        ? ReadonlyAccount<TAccountTokenProgramB>
        : TAccountTokenProgramB,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RepayDebtInstructionData = {
  discriminator: ReadonlyUint8Array;
  collateralFundsA: bigint;
  collateralFundsB: bigint;
};

export type RepayDebtInstructionDataArgs = {
  collateralFundsA: number | bigint;
  collateralFundsB: number | bigint;
};

export function getRepayDebtInstructionDataEncoder(): Encoder<RepayDebtInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['collateralFundsA', getU64Encoder()],
      ['collateralFundsB', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REPAY_DEBT_DISCRIMINATOR })
  );
}

export function getRepayDebtInstructionDataDecoder(): Decoder<RepayDebtInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['collateralFundsA', getU64Decoder()],
    ['collateralFundsB', getU64Decoder()],
  ]);
}

export function getRepayDebtInstructionDataCodec(): Codec<
  RepayDebtInstructionDataArgs,
  RepayDebtInstructionData
> {
  return combineCodec(
    getRepayDebtInstructionDataEncoder(),
    getRepayDebtInstructionDataDecoder()
  );
}

export type RepayDebtInput<
  TAccountAuthority extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountMarket extends string = string,
  TAccountVaultA extends string = string,
  TAccountVaultB extends string = string,
  TAccountVaultAAta extends string = string,
  TAccountVaultBAta extends string = string,
  TAccountTunaPosition extends string = string,
  TAccountTunaPositionAtaA extends string = string,
  TAccountTunaPositionAtaB extends string = string,
  TAccountTunaPositionOwnerAtaA extends string = string,
  TAccountTunaPositionOwnerAtaB extends string = string,
  TAccountTokenProgramA extends string = string,
  TAccountTokenProgramB extends string = string,
  TAccountMemoProgram extends string = string,
> = {
  /**
   *
   * TUNA accounts
   *
   */
  authority: TransactionSigner<TAccountAuthority>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  market: Address<TAccountMarket>;
  vaultA: Address<TAccountVaultA>;
  vaultB: Address<TAccountVaultB>;
  vaultAAta: Address<TAccountVaultAAta>;
  vaultBAta: Address<TAccountVaultBAta>;
  tunaPosition: Address<TAccountTunaPosition>;
  tunaPositionAtaA: Address<TAccountTunaPositionAtaA>;
  tunaPositionAtaB: Address<TAccountTunaPositionAtaB>;
  tunaPositionOwnerAtaA: Address<TAccountTunaPositionOwnerAtaA>;
  tunaPositionOwnerAtaB: Address<TAccountTunaPositionOwnerAtaB>;
  /**
   *
   * Other accounts
   *
   */
  tokenProgramA: Address<TAccountTokenProgramA>;
  tokenProgramB: Address<TAccountTokenProgramB>;
  memoProgram: Address<TAccountMemoProgram>;
  collateralFundsA: RepayDebtInstructionDataArgs['collateralFundsA'];
  collateralFundsB: RepayDebtInstructionDataArgs['collateralFundsB'];
};

export function getRepayDebtInstruction<
  TAccountAuthority extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountMarket extends string,
  TAccountVaultA extends string,
  TAccountVaultB extends string,
  TAccountVaultAAta extends string,
  TAccountVaultBAta extends string,
  TAccountTunaPosition extends string,
  TAccountTunaPositionAtaA extends string,
  TAccountTunaPositionAtaB extends string,
  TAccountTunaPositionOwnerAtaA extends string,
  TAccountTunaPositionOwnerAtaB extends string,
  TAccountTokenProgramA extends string,
  TAccountTokenProgramB extends string,
  TAccountMemoProgram extends string,
  TProgramAddress extends Address = typeof TUNA_PROGRAM_ADDRESS,
>(
  input: RepayDebtInput<
    TAccountAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountMarket,
    TAccountVaultA,
    TAccountVaultB,
    TAccountVaultAAta,
    TAccountVaultBAta,
    TAccountTunaPosition,
    TAccountTunaPositionAtaA,
    TAccountTunaPositionAtaB,
    TAccountTunaPositionOwnerAtaA,
    TAccountTunaPositionOwnerAtaB,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountMemoProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RepayDebtInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountMintA,
  TAccountMintB,
  TAccountMarket,
  TAccountVaultA,
  TAccountVaultB,
  TAccountVaultAAta,
  TAccountVaultBAta,
  TAccountTunaPosition,
  TAccountTunaPositionAtaA,
  TAccountTunaPositionAtaB,
  TAccountTunaPositionOwnerAtaA,
  TAccountTunaPositionOwnerAtaB,
  TAccountTokenProgramA,
  TAccountTokenProgramB,
  TAccountMemoProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TUNA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    market: { value: input.market ?? null, isWritable: false },
    vaultA: { value: input.vaultA ?? null, isWritable: true },
    vaultB: { value: input.vaultB ?? null, isWritable: true },
    vaultAAta: { value: input.vaultAAta ?? null, isWritable: true },
    vaultBAta: { value: input.vaultBAta ?? null, isWritable: true },
    tunaPosition: { value: input.tunaPosition ?? null, isWritable: true },
    tunaPositionAtaA: {
      value: input.tunaPositionAtaA ?? null,
      isWritable: true,
    },
    tunaPositionAtaB: {
      value: input.tunaPositionAtaB ?? null,
      isWritable: true,
    },
    tunaPositionOwnerAtaA: {
      value: input.tunaPositionOwnerAtaA ?? null,
      isWritable: true,
    },
    tunaPositionOwnerAtaB: {
      value: input.tunaPositionOwnerAtaB ?? null,
      isWritable: true,
    },
    tokenProgramA: { value: input.tokenProgramA ?? null, isWritable: false },
    tokenProgramB: { value: input.tokenProgramB ?? null, isWritable: false },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.vaultA),
      getAccountMeta(accounts.vaultB),
      getAccountMeta(accounts.vaultAAta),
      getAccountMeta(accounts.vaultBAta),
      getAccountMeta(accounts.tunaPosition),
      getAccountMeta(accounts.tunaPositionAtaA),
      getAccountMeta(accounts.tunaPositionAtaB),
      getAccountMeta(accounts.tunaPositionOwnerAtaA),
      getAccountMeta(accounts.tunaPositionOwnerAtaB),
      getAccountMeta(accounts.tokenProgramA),
      getAccountMeta(accounts.tokenProgramB),
      getAccountMeta(accounts.memoProgram),
    ],
    programAddress,
    data: getRepayDebtInstructionDataEncoder().encode(
      args as RepayDebtInstructionDataArgs
    ),
  } as RepayDebtInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountMarket,
    TAccountVaultA,
    TAccountVaultB,
    TAccountVaultAAta,
    TAccountVaultBAta,
    TAccountTunaPosition,
    TAccountTunaPositionAtaA,
    TAccountTunaPositionAtaB,
    TAccountTunaPositionOwnerAtaA,
    TAccountTunaPositionOwnerAtaB,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountMemoProgram
  >;

  return instruction;
}

export type ParsedRepayDebtInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     *
     * TUNA accounts
     *
     */

    authority: TAccountMetas[0];
    mintA: TAccountMetas[1];
    mintB: TAccountMetas[2];
    market: TAccountMetas[3];
    vaultA: TAccountMetas[4];
    vaultB: TAccountMetas[5];
    vaultAAta: TAccountMetas[6];
    vaultBAta: TAccountMetas[7];
    tunaPosition: TAccountMetas[8];
    tunaPositionAtaA: TAccountMetas[9];
    tunaPositionAtaB: TAccountMetas[10];
    tunaPositionOwnerAtaA: TAccountMetas[11];
    tunaPositionOwnerAtaB: TAccountMetas[12];
    /**
     *
     * Other accounts
     *
     */

    tokenProgramA: TAccountMetas[13];
    tokenProgramB: TAccountMetas[14];
    memoProgram: TAccountMetas[15];
  };
  data: RepayDebtInstructionData;
};

export function parseRepayDebtInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRepayDebtInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      mintA: getNextAccount(),
      mintB: getNextAccount(),
      market: getNextAccount(),
      vaultA: getNextAccount(),
      vaultB: getNextAccount(),
      vaultAAta: getNextAccount(),
      vaultBAta: getNextAccount(),
      tunaPosition: getNextAccount(),
      tunaPositionAtaA: getNextAccount(),
      tunaPositionAtaB: getNextAccount(),
      tunaPositionOwnerAtaA: getNextAccount(),
      tunaPositionOwnerAtaB: getNextAccount(),
      tokenProgramA: getNextAccount(),
      tokenProgramB: getNextAccount(),
      memoProgram: getNextAccount(),
    },
    data: getRepayDebtInstructionDataDecoder().decode(instruction.data),
  };
}
