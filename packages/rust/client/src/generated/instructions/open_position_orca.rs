//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct OpenPositionOrca {
            /// 
/// TUNA accounts
/// 

    
              
          pub authority: solana_program::pubkey::Pubkey,
          
              
          pub market: solana_program::pubkey::Pubkey,
          
              
          pub tuna_position: solana_program::pubkey::Pubkey,
          
              
          pub tuna_position_mint: solana_program::pubkey::Pubkey,
          
              
          pub tuna_position_ata: solana_program::pubkey::Pubkey,
                /// 
/// ORCA accounts
/// 

    
              
          pub whirlpool_program: solana_program::pubkey::Pubkey,
          
              
          pub whirlpool: solana_program::pubkey::Pubkey,
          
              
          pub orca_position: solana_program::pubkey::Pubkey,
          
              
          pub metadata_update_auth: solana_program::pubkey::Pubkey,
                /// 
/// Other accounts
/// 

    
              
          pub token2022_program: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub associated_token_program: solana_program::pubkey::Pubkey,
      }

impl OpenPositionOrca {
  pub fn instruction(&self, args: OpenPositionOrcaInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: OpenPositionOrcaInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(12+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.market,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.tuna_position,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.tuna_position_mint,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.tuna_position_ata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.whirlpool_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.whirlpool,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.orca_position,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.metadata_update_auth,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token2022_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&OpenPositionOrcaInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::TUNA_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct OpenPositionOrcaInstructionData {
            discriminator: [u8; 8],
                                    }

impl OpenPositionOrcaInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [201, 85, 45, 226, 182, 208, 246, 115],
                                                                                        }
  }
}

impl Default for OpenPositionOrcaInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct OpenPositionOrcaInstructionArgs {
                  pub tick_lower_index: i32,
                pub tick_upper_index: i32,
                pub tick_stop_loss_index: i32,
                pub tick_take_profit_index: i32,
                pub flags: u32,
      }


/// Instruction builder for `OpenPositionOrca`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` authority
          ///   1. `[]` market
                ///   2. `[writable]` tuna_position
                      ///   3. `[writable, signer]` tuna_position_mint
                ///   4. `[writable]` tuna_position_ata
          ///   5. `[]` whirlpool_program
          ///   6. `[]` whirlpool
                ///   7. `[writable]` orca_position
          ///   8. `[]` metadata_update_auth
          ///   9. `[]` token2022_program
                ///   10. `[optional]` system_program (default to `11111111111111111111111111111111`)
          ///   11. `[]` associated_token_program
#[derive(Clone, Debug, Default)]
pub struct OpenPositionOrcaBuilder {
            authority: Option<solana_program::pubkey::Pubkey>,
                market: Option<solana_program::pubkey::Pubkey>,
                tuna_position: Option<solana_program::pubkey::Pubkey>,
                tuna_position_mint: Option<solana_program::pubkey::Pubkey>,
                tuna_position_ata: Option<solana_program::pubkey::Pubkey>,
                whirlpool_program: Option<solana_program::pubkey::Pubkey>,
                whirlpool: Option<solana_program::pubkey::Pubkey>,
                orca_position: Option<solana_program::pubkey::Pubkey>,
                metadata_update_auth: Option<solana_program::pubkey::Pubkey>,
                token2022_program: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                associated_token_program: Option<solana_program::pubkey::Pubkey>,
                        tick_lower_index: Option<i32>,
                tick_upper_index: Option<i32>,
                tick_stop_loss_index: Option<i32>,
                tick_take_profit_index: Option<i32>,
                flags: Option<u32>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl OpenPositionOrcaBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            /// 
/// TUNA accounts
/// 
#[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.authority = Some(authority);
                    self
    }
            #[inline(always)]
    pub fn market(&mut self, market: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.market = Some(market);
                    self
    }
            #[inline(always)]
    pub fn tuna_position(&mut self, tuna_position: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.tuna_position = Some(tuna_position);
                    self
    }
            #[inline(always)]
    pub fn tuna_position_mint(&mut self, tuna_position_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.tuna_position_mint = Some(tuna_position_mint);
                    self
    }
            #[inline(always)]
    pub fn tuna_position_ata(&mut self, tuna_position_ata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.tuna_position_ata = Some(tuna_position_ata);
                    self
    }
            /// 
/// ORCA accounts
/// 
#[inline(always)]
    pub fn whirlpool_program(&mut self, whirlpool_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.whirlpool_program = Some(whirlpool_program);
                    self
    }
            #[inline(always)]
    pub fn whirlpool(&mut self, whirlpool: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.whirlpool = Some(whirlpool);
                    self
    }
            #[inline(always)]
    pub fn orca_position(&mut self, orca_position: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.orca_position = Some(orca_position);
                    self
    }
            #[inline(always)]
    pub fn metadata_update_auth(&mut self, metadata_update_auth: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.metadata_update_auth = Some(metadata_update_auth);
                    self
    }
            /// 
/// Other accounts
/// 
#[inline(always)]
    pub fn token2022_program(&mut self, token2022_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token2022_program = Some(token2022_program);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            #[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.associated_token_program = Some(associated_token_program);
                    self
    }
                    #[inline(always)]
      pub fn tick_lower_index(&mut self, tick_lower_index: i32) -> &mut Self {
        self.tick_lower_index = Some(tick_lower_index);
        self
      }
                #[inline(always)]
      pub fn tick_upper_index(&mut self, tick_upper_index: i32) -> &mut Self {
        self.tick_upper_index = Some(tick_upper_index);
        self
      }
                #[inline(always)]
      pub fn tick_stop_loss_index(&mut self, tick_stop_loss_index: i32) -> &mut Self {
        self.tick_stop_loss_index = Some(tick_stop_loss_index);
        self
      }
                #[inline(always)]
      pub fn tick_take_profit_index(&mut self, tick_take_profit_index: i32) -> &mut Self {
        self.tick_take_profit_index = Some(tick_take_profit_index);
        self
      }
                #[inline(always)]
      pub fn flags(&mut self, flags: u32) -> &mut Self {
        self.flags = Some(flags);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = OpenPositionOrca {
                              authority: self.authority.expect("authority is not set"),
                                        market: self.market.expect("market is not set"),
                                        tuna_position: self.tuna_position.expect("tuna_position is not set"),
                                        tuna_position_mint: self.tuna_position_mint.expect("tuna_position_mint is not set"),
                                        tuna_position_ata: self.tuna_position_ata.expect("tuna_position_ata is not set"),
                                        whirlpool_program: self.whirlpool_program.expect("whirlpool_program is not set"),
                                        whirlpool: self.whirlpool.expect("whirlpool is not set"),
                                        orca_position: self.orca_position.expect("orca_position is not set"),
                                        metadata_update_auth: self.metadata_update_auth.expect("metadata_update_auth is not set"),
                                        token2022_program: self.token2022_program.expect("token2022_program is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                                        associated_token_program: self.associated_token_program.expect("associated_token_program is not set"),
                      };
          let args = OpenPositionOrcaInstructionArgs {
                                                              tick_lower_index: self.tick_lower_index.clone().expect("tick_lower_index is not set"),
                                                                  tick_upper_index: self.tick_upper_index.clone().expect("tick_upper_index is not set"),
                                                                  tick_stop_loss_index: self.tick_stop_loss_index.clone().expect("tick_stop_loss_index is not set"),
                                                                  tick_take_profit_index: self.tick_take_profit_index.clone().expect("tick_take_profit_index is not set"),
                                                                  flags: self.flags.clone().expect("flags is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `open_position_orca` CPI accounts.
  pub struct OpenPositionOrcaCpiAccounts<'a, 'b> {
                  /// 
/// TUNA accounts
/// 

      
                    
              pub authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub market: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub tuna_position: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub tuna_position_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub tuna_position_ata: &'b solana_program::account_info::AccountInfo<'a>,
                        /// 
/// ORCA accounts
/// 

      
                    
              pub whirlpool_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub whirlpool: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub orca_position: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub metadata_update_auth: &'b solana_program::account_info::AccountInfo<'a>,
                        /// 
/// Other accounts
/// 

      
                    
              pub token2022_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `open_position_orca` CPI instruction.
pub struct OpenPositionOrcaCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
            /// 
/// TUNA accounts
/// 

    
              
          pub authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub market: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub tuna_position: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub tuna_position_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub tuna_position_ata: &'b solana_program::account_info::AccountInfo<'a>,
                /// 
/// ORCA accounts
/// 

    
              
          pub whirlpool_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub whirlpool: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub orca_position: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub metadata_update_auth: &'b solana_program::account_info::AccountInfo<'a>,
                /// 
/// Other accounts
/// 

    
              
          pub token2022_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: OpenPositionOrcaInstructionArgs,
  }

impl<'a, 'b> OpenPositionOrcaCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: OpenPositionOrcaCpiAccounts<'a, 'b>,
              args: OpenPositionOrcaInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              authority: accounts.authority,
              market: accounts.market,
              tuna_position: accounts.tuna_position,
              tuna_position_mint: accounts.tuna_position_mint,
              tuna_position_ata: accounts.tuna_position_ata,
              whirlpool_program: accounts.whirlpool_program,
              whirlpool: accounts.whirlpool,
              orca_position: accounts.orca_position,
              metadata_update_auth: accounts.metadata_update_auth,
              token2022_program: accounts.token2022_program,
              system_program: accounts.system_program,
              associated_token_program: accounts.associated_token_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(12+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.market.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tuna_position.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tuna_position_mint.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tuna_position_ata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.whirlpool_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.whirlpool.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.orca_position.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.metadata_update_auth.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token2022_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&OpenPositionOrcaInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::TUNA_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(13 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.authority.clone());
                        account_infos.push(self.market.clone());
                        account_infos.push(self.tuna_position.clone());
                        account_infos.push(self.tuna_position_mint.clone());
                        account_infos.push(self.tuna_position_ata.clone());
                        account_infos.push(self.whirlpool_program.clone());
                        account_infos.push(self.whirlpool.clone());
                        account_infos.push(self.orca_position.clone());
                        account_infos.push(self.metadata_update_auth.clone());
                        account_infos.push(self.token2022_program.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.associated_token_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `OpenPositionOrca` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` authority
          ///   1. `[]` market
                ///   2. `[writable]` tuna_position
                      ///   3. `[writable, signer]` tuna_position_mint
                ///   4. `[writable]` tuna_position_ata
          ///   5. `[]` whirlpool_program
          ///   6. `[]` whirlpool
                ///   7. `[writable]` orca_position
          ///   8. `[]` metadata_update_auth
          ///   9. `[]` token2022_program
          ///   10. `[]` system_program
          ///   11. `[]` associated_token_program
#[derive(Clone, Debug)]
pub struct OpenPositionOrcaCpiBuilder<'a, 'b> {
  instruction: Box<OpenPositionOrcaCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> OpenPositionOrcaCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(OpenPositionOrcaCpiBuilderInstruction {
      __program: program,
              authority: None,
              market: None,
              tuna_position: None,
              tuna_position_mint: None,
              tuna_position_ata: None,
              whirlpool_program: None,
              whirlpool: None,
              orca_position: None,
              metadata_update_auth: None,
              token2022_program: None,
              system_program: None,
              associated_token_program: None,
                                            tick_lower_index: None,
                                tick_upper_index: None,
                                tick_stop_loss_index: None,
                                tick_take_profit_index: None,
                                flags: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      /// 
/// TUNA accounts
/// 
#[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authority = Some(authority);
                    self
    }
      #[inline(always)]
    pub fn market(&mut self, market: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.market = Some(market);
                    self
    }
      #[inline(always)]
    pub fn tuna_position(&mut self, tuna_position: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.tuna_position = Some(tuna_position);
                    self
    }
      #[inline(always)]
    pub fn tuna_position_mint(&mut self, tuna_position_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.tuna_position_mint = Some(tuna_position_mint);
                    self
    }
      #[inline(always)]
    pub fn tuna_position_ata(&mut self, tuna_position_ata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.tuna_position_ata = Some(tuna_position_ata);
                    self
    }
      /// 
/// ORCA accounts
/// 
#[inline(always)]
    pub fn whirlpool_program(&mut self, whirlpool_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.whirlpool_program = Some(whirlpool_program);
                    self
    }
      #[inline(always)]
    pub fn whirlpool(&mut self, whirlpool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.whirlpool = Some(whirlpool);
                    self
    }
      #[inline(always)]
    pub fn orca_position(&mut self, orca_position: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.orca_position = Some(orca_position);
                    self
    }
      #[inline(always)]
    pub fn metadata_update_auth(&mut self, metadata_update_auth: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.metadata_update_auth = Some(metadata_update_auth);
                    self
    }
      /// 
/// Other accounts
/// 
#[inline(always)]
    pub fn token2022_program(&mut self, token2022_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token2022_program = Some(token2022_program);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.associated_token_program = Some(associated_token_program);
                    self
    }
                    #[inline(always)]
      pub fn tick_lower_index(&mut self, tick_lower_index: i32) -> &mut Self {
        self.instruction.tick_lower_index = Some(tick_lower_index);
        self
      }
                #[inline(always)]
      pub fn tick_upper_index(&mut self, tick_upper_index: i32) -> &mut Self {
        self.instruction.tick_upper_index = Some(tick_upper_index);
        self
      }
                #[inline(always)]
      pub fn tick_stop_loss_index(&mut self, tick_stop_loss_index: i32) -> &mut Self {
        self.instruction.tick_stop_loss_index = Some(tick_stop_loss_index);
        self
      }
                #[inline(always)]
      pub fn tick_take_profit_index(&mut self, tick_take_profit_index: i32) -> &mut Self {
        self.instruction.tick_take_profit_index = Some(tick_take_profit_index);
        self
      }
                #[inline(always)]
      pub fn flags(&mut self, flags: u32) -> &mut Self {
        self.instruction.flags = Some(flags);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = OpenPositionOrcaInstructionArgs {
                                                              tick_lower_index: self.instruction.tick_lower_index.clone().expect("tick_lower_index is not set"),
                                                                  tick_upper_index: self.instruction.tick_upper_index.clone().expect("tick_upper_index is not set"),
                                                                  tick_stop_loss_index: self.instruction.tick_stop_loss_index.clone().expect("tick_stop_loss_index is not set"),
                                                                  tick_take_profit_index: self.instruction.tick_take_profit_index.clone().expect("tick_take_profit_index is not set"),
                                                                  flags: self.instruction.flags.clone().expect("flags is not set"),
                                    };
        let instruction = OpenPositionOrcaCpi {
        __program: self.instruction.__program,
                  
          authority: self.instruction.authority.expect("authority is not set"),
                  
          market: self.instruction.market.expect("market is not set"),
                  
          tuna_position: self.instruction.tuna_position.expect("tuna_position is not set"),
                  
          tuna_position_mint: self.instruction.tuna_position_mint.expect("tuna_position_mint is not set"),
                  
          tuna_position_ata: self.instruction.tuna_position_ata.expect("tuna_position_ata is not set"),
                  
          whirlpool_program: self.instruction.whirlpool_program.expect("whirlpool_program is not set"),
                  
          whirlpool: self.instruction.whirlpool.expect("whirlpool is not set"),
                  
          orca_position: self.instruction.orca_position.expect("orca_position is not set"),
                  
          metadata_update_auth: self.instruction.metadata_update_auth.expect("metadata_update_auth is not set"),
                  
          token2022_program: self.instruction.token2022_program.expect("token2022_program is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          associated_token_program: self.instruction.associated_token_program.expect("associated_token_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct OpenPositionOrcaCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                tuna_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                tuna_position_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                tuna_position_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                whirlpool_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                whirlpool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                orca_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                metadata_update_auth: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token2022_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        tick_lower_index: Option<i32>,
                tick_upper_index: Option<i32>,
                tick_stop_loss_index: Option<i32>,
                tick_take_profit_index: Option<i32>,
                flags: Option<u32>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

